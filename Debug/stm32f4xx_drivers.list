
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800256c  0800256c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800256c  0800256c  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800256c  0800256c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002570  08002570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08002574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  200000bc  08002630  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002630  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004426  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b24  00000000  00000000  00024512  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a8  00000000  00000000  00025038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000250  00000000  00000000  000252e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d6cd  00000000  00000000  00025530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002523  00000000  00000000  00032bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000443e2  00000000  00000000  00035120  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00079502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001114  00000000  00000000  00079580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002460 	.word	0x08002460

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	08002460 	.word	0x08002460

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	da0b      	bge.n	80002bc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <NVIC_SetPriority+0x4c>)
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	3b04      	subs	r3, #4
 80002b2:	0112      	lsls	r2, r2, #4
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	440b      	add	r3, r1
 80002b8:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ba:	e009      	b.n	80002d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <NVIC_SetPriority+0x50>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <delay>:
 * PB12 -> NSS
 * ATL -- AF5
 */

void delay(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	e002      	b.n	80002f6 <delay+0x12>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3301      	adds	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <delay+0x28>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d9f8      	bls.n	80002f0 <delay+0xc>
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	0003d08f 	.word	0x0003d08f

08000310 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <SPI2_GPIOInits+0x58>)
 8000318:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800031a:	2302      	movs	r3, #2
 800031c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800031e:	2305      	movs	r3, #5
 8000320:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000322:	2300      	movs	r3, #0
 8000324:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;  // Initial state needs to be set!
 8000326:	2301      	movs	r3, #1
 8000328:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800032a:	2302      	movs	r3, #2
 800032c:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 800032e:	230d      	movs	r3, #13
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fbc7 	bl	8000ac8 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 800033a:	230f      	movs	r3, #15
 800033c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fbc1 	bl	8000ac8 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000346:	230e      	movs	r3, #14
 8000348:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fbbb 	bl	8000ac8 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000352:	230c      	movs	r3, #12
 8000354:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fbb5 	bl	8000ac8 <GPIO_Init>

}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40020400 	.word	0x40020400

0800036c <SPI2_Inits>:

SPI_Handle_t static SPI2handle;
uint8_t static *placeholder_ARGS = 0;

void SPI2_Inits(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

	SPI2handle.pSPIx = SPI2;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <SPI2_Inits+0x50>)
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <SPI2_Inits+0x54>)
 8000374:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <SPI2_Inits+0x50>)
 8000378:	2201      	movs	r2, #1
 800037a:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <SPI2_Inits+0x50>)
 800037e:	2201      	movs	r2, #1
 8000380:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // actual value 8Mhz
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <SPI2_Inits+0x50>)
 8000384:	2202      	movs	r2, #2
 8000386:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <SPI2_Inits+0x50>)
 800038a:	2200      	movs	r2, #0
 800038c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <SPI2_Inits+0x50>)
 8000390:	2200      	movs	r2, #0
 8000392:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <SPI2_Inits+0x50>)
 8000396:	2200      	movs	r2, #0
 8000398:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave management
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <SPI2_Inits+0x50>)
 800039c:	2200      	movs	r2, #0
 800039e:	729a      	strb	r2, [r3, #10]
	// Init buffers

	SPI2handle.args = &placeholder_ARGS;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <SPI2_Inits+0x50>)
 80003a2:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <SPI2_Inits+0x58>)
 80003a4:	611a      	str	r2, [r3, #16]
	SPI2handle.pRxBuffer = (uint8_t *) 0;
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <SPI2_Inits+0x50>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
	SPI2handle.pTxBuffer = (uint8_t *) 0;
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <SPI2_Inits+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]

	SPI_Init(&SPI2handle);
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <SPI2_Inits+0x50>)
 80003b4:	f000 fe2a 	bl	800100c <SPI_Init>

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200000d8 	.word	0x200000d8
 80003c0:	40003800 	.word	0x40003800
 80003c4:	200000fc 	.word	0x200000fc

080003c8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0

	GPIO_Handle_t Button_01;

	Button_01.pGPIOx = GPIOA;
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <GPIO_ButtonInit+0x3c>)
 80003d0:	607b      	str	r3, [r7, #4]
	Button_01.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	723b      	strb	r3, [r7, #8]
	Button_01.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80003d6:	2304      	movs	r3, #4
 80003d8:	727b      	strb	r3, [r7, #9]
	Button_01.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003da:	2302      	movs	r3, #2
 80003dc:	72bb      	strb	r3, [r7, #10]
	Button_01.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003de:	2300      	movs	r3, #0
 80003e0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&Button_01);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fb6f 	bl	8000ac8 <GPIO_Init>

	// IRQ Configuration
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, __ENABLE);
 80003ea:	2101      	movs	r1, #1
 80003ec:	2006      	movs	r0, #6
 80003ee:	f000 fd0f 	bl	8000e10 <GPIO_IRQInterruptConfig>
	//GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, 12);
	//NVIC_EnableIRQ(IRQ_NO_EXTI0);
	NVIC_SetPriority(IRQ_NO_EXTI0, 12);
 80003f2:	210c      	movs	r1, #12
 80003f4:	2006      	movs	r0, #6
 80003f6:	f7ff ff4b 	bl	8000290 <NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40020000 	.word	0x40020000

08000408 <main>:
		&_CMD_LED_READ,
		&_CMD_PRINT,
		&_CMD_ID_READ
};

int main(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 800040e:	f7ff ffdb 	bl	80003c8 <GPIO_ButtonInit>

	// This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000412:	f7ff ff7d 	bl	8000310 <SPI2_GPIOInits>

	// This function is used to initialize the SPI2 Peripheral parameters
	SPI2_Inits();
 8000416:	f7ff ffa9 	bl	800036c <SPI2_Inits>

	// Set the configuration cell the peripheral should work on (Multimaster environment)
	SPI_SSOEConfig(SPI2, __ENABLE);
 800041a:	2101      	movs	r1, #1
 800041c:	4812      	ldr	r0, [pc, #72]	; (8000468 <main+0x60>)
 800041e:	f000 fef3 	bl	8001208 <SPI_SSOEConfig>

	uint8_t v = 1;
 8000422:	2301      	movs	r3, #1
 8000424:	71fb      	strb	r3, [r7, #7]

	// 11111010000001010 0000 000 00000 000
	//SCB->AIRCR = 0x05FA0000;
	//NVIC_SetPriorityGrouping((uint32_t)0x300);

	printf("Lets see: %d", v);
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4619      	mov	r1, r3
 800042a:	4810      	ldr	r0, [pc, #64]	; (800046c <main+0x64>)
 800042c:	f001 fb56 	bl	8001adc <iprintf>
	fflush(stdout);
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <main+0x68>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	4618      	mov	r0, r3
 8000438:	f001 f9a0 	bl	800177c <fflush>

	// Interrupt config
	SPI_IRQInterruptConfig(IRQ_NO_SPI2, __ENABLE);
 800043c:	2101      	movs	r1, #1
 800043e:	2024      	movs	r0, #36	; 0x24
 8000440:	f000 fe40 	bl	80010c4 <SPI_IRQInterruptConfig>


	//NVIC_EnableIRQ(IRQ_NO_SPI2);
	NVIC_SetPriority(IRQ_NO_SPI2, 2);
 8000444:	2102      	movs	r1, #2
 8000446:	2024      	movs	r0, #36	; 0x24
 8000448:	f7ff ff22 	bl	8000290 <NVIC_SetPriority>
	//SPI_IRQPriorityConfig(IRQ_NO_SPI2, 2);


	while(1) { // Keep the processor busy and at the same time keep the whole flow running

		while ( SPI_GetStatus(SPI2, 7) );
 800044c:	bf00      	nop
 800044e:	2107      	movs	r1, #7
 8000450:	4805      	ldr	r0, [pc, #20]	; (8000468 <main+0x60>)
 8000452:	f000 fef5 	bl	8001240 <SPI_GetStatus>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f8      	bne.n	800044e <main+0x46>

		SPI_PeripheralControl(SPI2, __DISABLE);
 800045c:	2100      	movs	r1, #0
 800045e:	4802      	ldr	r0, [pc, #8]	; (8000468 <main+0x60>)
 8000460:	f000 feb6 	bl	80011d0 <SPI_PeripheralControl>
		while ( SPI_GetStatus(SPI2, 7) );
 8000464:	e7f2      	b.n	800044c <main+0x44>
 8000466:	bf00      	nop
 8000468:	40003800 	.word	0x40003800
 800046c:	080024c4 	.word	0x080024c4
 8000470:	20000058 	.word	0x20000058

08000474 <SPI_VerifyResponse>:
	}

	return 0;
}

uint8_t SPI_VerifyResponse(uint8_t ackbyte) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]

	if (ackbyte == (uint8_t)0xF5) {
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2bf5      	cmp	r3, #245	; 0xf5
 8000482:	d101      	bne.n	8000488 <SPI_VerifyResponse+0x14>
		// ack
		return 1;
 8000484:	2301      	movs	r3, #1
 8000486:	e000      	b.n	800048a <SPI_VerifyResponse+0x16>
	} else  {
		// nack
		return 0;
 8000488:	2300      	movs	r3, #0
	}

}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <SPI2_IRQHandler>:

}

uint8_t static *context_code;

void SPI2_IRQHandler(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2handle);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <SPI2_IRQHandler+0x10>)
 800049e:	f001 f818 	bl	80014d2 <SPI_IRQHandling>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000d8 	.word	0x200000d8

080004ac <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

	GPIO_IRQHandling(0);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fd33 	bl	8000f1c <GPIO_IRQHandling>

	// Init context code
	if (context_code == 0) { context_code = &spiCommands.CMD_LED_CTR->code; }
 80004b6:	4b16      	ldr	r3, [pc, #88]	; (8000510 <EXTI0_IRQHandler+0x64>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d104      	bne.n	80004c8 <EXTI0_IRQHandler+0x1c>
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <EXTI0_IRQHandler+0x68>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <EXTI0_IRQHandler+0x64>)
 80004c6:	601a      	str	r2, [r3, #0]


	SPI_PeripheralControl(SPI2, __ENABLE);
 80004c8:	2101      	movs	r1, #1
 80004ca:	4813      	ldr	r0, [pc, #76]	; (8000518 <EXTI0_IRQHandler+0x6c>)
 80004cc:	f000 fe80 	bl	80011d0 <SPI_PeripheralControl>

	// 1. Command
	if (context_code == &spiCommands.CMD_LED_CTR->code) {
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <EXTI0_IRQHandler+0x68>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <EXTI0_IRQHandler+0x64>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d107      	bne.n	80004ee <EXTI0_IRQHandler+0x42>
		SPI_SendDataIT(&SPI2handle, context_code, 1);
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <EXTI0_IRQHandler+0x64>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <EXTI0_IRQHandler+0x70>)
 80004e8:	f000 feeb 	bl	80012c2 <SPI_SendDataIT>
		SPI_SendDataIT(&SPI2handle, context_code, 1);
	}



}
 80004ec:	e00d      	b.n	800050a <EXTI0_IRQHandler+0x5e>
	} else if (context_code == &spiCommands.CMD_SENSOR_READ->code) {
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <EXTI0_IRQHandler+0x68>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	461a      	mov	r2, r3
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <EXTI0_IRQHandler+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d106      	bne.n	800050a <EXTI0_IRQHandler+0x5e>
		SPI_SendDataIT(&SPI2handle, context_code, 1);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <EXTI0_IRQHandler+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <EXTI0_IRQHandler+0x70>)
 8000506:	f000 fedc 	bl	80012c2 <SPI_SendDataIT>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000104 	.word	0x20000104
 8000514:	20000040 	.word	0x20000040
 8000518:	40003800 	.word	0x40003800
 800051c:	200000d8 	.word	0x200000d8

08000520 <executeCommand>:

void executeCommand(int8_t *ack) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

	if (context_code == &spiCommands.CMD_LED_CTR->code) {
 8000528:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <executeCommand+0xf8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b3b      	ldr	r3, [pc, #236]	; (800061c <executeCommand+0xfc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	d112      	bne.n	800055c <executeCommand+0x3c>
		spiCommands.CMD_LED_CTR->args[0] = (char *)LED_PIN;
 8000536:	4b38      	ldr	r3, [pc, #224]	; (8000618 <executeCommand+0xf8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2209      	movs	r2, #9
 800053c:	605a      	str	r2, [r3, #4]
		spiCommands.CMD_LED_CTR->args[1] = (char *)LED_ON;
 800053e:	4b36      	ldr	r3, [pc, #216]	; (8000618 <executeCommand+0xf8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2201      	movs	r2, #1
 8000544:	609a      	str	r2, [r3, #8]
		SPI_SendArgsIT(&SPI2handle, spiCommands.CMD_LED_CTR, 2);
 8000546:	4b34      	ldr	r3, [pc, #208]	; (8000618 <executeCommand+0xf8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2202      	movs	r2, #2
 800054c:	4619      	mov	r1, r3
 800054e:	4834      	ldr	r0, [pc, #208]	; (8000620 <executeCommand+0x100>)
 8000550:	f000 fe8e 	bl	8001270 <SPI_SendArgsIT>
		*ack = ACK_DONE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			*ack = ACK_DONE;
		}

	}

}
 800055a:	e059      	b.n	8000610 <executeCommand+0xf0>
	} else if (context_code == &spiCommands.CMD_SENSOR_READ->code) {
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <executeCommand+0xf8>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	461a      	mov	r2, r3
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <executeCommand+0xfc>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d152      	bne.n	8000610 <executeCommand+0xf0>
		if (*ack == 1) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f993 3000 	ldrsb.w	r3, [r3]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d114      	bne.n	800059e <executeCommand+0x7e>
			spiCommands.CMD_SENSOR_READ->args[0] = (char *)ANALOG_PIN0;
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <executeCommand+0xf8>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
			SPI_SendArgsIT(&SPI2handle, spiCommands.CMD_SENSOR_READ, 1);
 800057c:	4b26      	ldr	r3, [pc, #152]	; (8000618 <executeCommand+0xf8>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	4826      	ldr	r0, [pc, #152]	; (8000620 <executeCommand+0x100>)
 8000586:	f000 fe73 	bl	8001270 <SPI_SendArgsIT>
			*ack += 1;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f993 3000 	ldrsb.w	r3, [r3]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	3301      	adds	r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	b25a      	sxtb	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	701a      	strb	r2, [r3, #0]
}
 800059c:	e038      	b.n	8000610 <executeCommand+0xf0>
		} else if (*ack == 2) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f993 3000 	ldrsb.w	r3, [r3]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d110      	bne.n	80005ca <executeCommand+0xaa>
			SPI_ReceiveIT(&SPI2handle, &dummyread, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	491e      	ldr	r1, [pc, #120]	; (8000624 <executeCommand+0x104>)
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <executeCommand+0x100>)
 80005ae:	f000 feb0 	bl	8001312 <SPI_ReceiveIT>
			delay();
 80005b2:	f7ff fe97 	bl	80002e4 <delay>
			*ack += 1;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f993 3000 	ldrsb.w	r3, [r3]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	3301      	adds	r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	e022      	b.n	8000610 <executeCommand+0xf0>
		} else if (*ack == 3) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f993 3000 	ldrsb.w	r3, [r3]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d10e      	bne.n	80005f2 <executeCommand+0xd2>
			SPI_SendDataIT(&SPI2handle, &dummybyte, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	4914      	ldr	r1, [pc, #80]	; (8000628 <executeCommand+0x108>)
 80005d8:	4811      	ldr	r0, [pc, #68]	; (8000620 <executeCommand+0x100>)
 80005da:	f000 fe72 	bl	80012c2 <SPI_SendDataIT>
			*ack +=1;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f993 3000 	ldrsb.w	r3, [r3]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	3301      	adds	r3, #1
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	b25a      	sxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	e00e      	b.n	8000610 <executeCommand+0xf0>
		} else if (*ack == 4) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f993 3000 	ldrsb.w	r3, [r3]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d109      	bne.n	8000610 <executeCommand+0xf0>
			SPI_ReceiveIT(&SPI2handle, &analog_read, 1);
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <executeCommand+0x100>)
 8000606:	f000 fe84 	bl	8001312 <SPI_ReceiveIT>
			*ack = ACK_DONE;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000040 	.word	0x20000040
 800061c:	20000104 	.word	0x20000104
 8000620:	200000d8 	.word	0x200000d8
 8000624:	20000114 	.word	0x20000114
 8000628:	20000000 	.word	0x20000000

0800062c <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t event) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]

	// Ack to enable control flow
	int8_t static ack = -3;

	if (event == SPI_EVENT_TX_CMPLT) {
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d12e      	bne.n	800069c <SPI_ApplicationEventCallback+0x70>
		if (ack < 0) {
 800063e:	4b32      	ldr	r3, [pc, #200]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 8000640:	f993 3000 	ldrsb.w	r3, [r3]
 8000644:	2b00      	cmp	r3, #0
 8000646:	da5b      	bge.n	8000700 <SPI_ApplicationEventCallback+0xd4>
			// Setup for next command
			if (ack == -3) {
 8000648:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 800064a:	f993 3000 	ldrsb.w	r3, [r3]
 800064e:	f113 0f03 	cmn.w	r3, #3
 8000652:	d10e      	bne.n	8000672 <SPI_ApplicationEventCallback+0x46>
				SPI_ReceiveIT(&SPI2handle, &dummyread, 1); 		// cler the RX register
 8000654:	2201      	movs	r2, #1
 8000656:	492d      	ldr	r1, [pc, #180]	; (800070c <SPI_ApplicationEventCallback+0xe0>)
 8000658:	482d      	ldr	r0, [pc, #180]	; (8000710 <SPI_ApplicationEventCallback+0xe4>)
 800065a:	f000 fe5a 	bl	8001312 <SPI_ReceiveIT>
				ack += 1;
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 8000660:	f993 3000 	ldrsb.w	r3, [r3]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3301      	adds	r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	b25a      	sxtb	r2, r3
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 800066e:	701a      	strb	r2, [r3, #0]
		}
	} else if (event == SPI_EVENT_OVR_ERR) {
		SPI_ClearOVR(SPI2);
	}

}
 8000670:	e046      	b.n	8000700 <SPI_ApplicationEventCallback+0xd4>
			}else if (ack == -1) {
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 8000674:	f993 3000 	ldrsb.w	r3, [r3]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d140      	bne.n	8000700 <SPI_ApplicationEventCallback+0xd4>
				SPI_ReceiveIT(&SPI2handle, &ackbyte, 1);		// receive the remote ack
 800067e:	2201      	movs	r2, #1
 8000680:	4924      	ldr	r1, [pc, #144]	; (8000714 <SPI_ApplicationEventCallback+0xe8>)
 8000682:	4823      	ldr	r0, [pc, #140]	; (8000710 <SPI_ApplicationEventCallback+0xe4>)
 8000684:	f000 fe45 	bl	8001312 <SPI_ReceiveIT>
				ack += 1;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 800068a:	f993 3000 	ldrsb.w	r3, [r3]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	3301      	adds	r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	b25a      	sxtb	r2, r3
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	e031      	b.n	8000700 <SPI_ApplicationEventCallback+0xd4>
	} else if (event == SPI_EVENT_RX_CMPLT) {
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d128      	bne.n	80006f4 <SPI_ApplicationEventCallback+0xc8>
		if (ack == -2) {
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 80006a4:	f993 3000 	ldrsb.w	r3, [r3]
 80006a8:	f113 0f02 	cmn.w	r3, #2
 80006ac:	d10e      	bne.n	80006cc <SPI_ApplicationEventCallback+0xa0>
			SPI_SendDataIT(&SPI2handle, &dummybyte, 1); 	// fetch the data
 80006ae:	2201      	movs	r2, #1
 80006b0:	4919      	ldr	r1, [pc, #100]	; (8000718 <SPI_ApplicationEventCallback+0xec>)
 80006b2:	4817      	ldr	r0, [pc, #92]	; (8000710 <SPI_ApplicationEventCallback+0xe4>)
 80006b4:	f000 fe05 	bl	80012c2 <SPI_SendDataIT>
			ack += 1;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 80006ba:	f993 3000 	ldrsb.w	r3, [r3]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	3301      	adds	r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 80006c8:	701a      	strb	r2, [r3, #0]
}
 80006ca:	e019      	b.n	8000700 <SPI_ApplicationEventCallback+0xd4>
		} else if (ack == 0) {
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 80006ce:	f993 3000 	ldrsb.w	r3, [r3]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d114      	bne.n	8000700 <SPI_ApplicationEventCallback+0xd4>
			if (SPI_VerifyResponse(ackbyte)) {
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SPI_ApplicationEventCallback+0xe8>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff feca 	bl	8000474 <SPI_VerifyResponse>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00c      	beq.n	8000700 <SPI_ApplicationEventCallback+0xd4>
				ack = ACK_NOT_YET;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
				executeCommand(&ack);
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <SPI_ApplicationEventCallback+0xdc>)
 80006ee:	f7ff ff17 	bl	8000520 <executeCommand>
}
 80006f2:	e005      	b.n	8000700 <SPI_ApplicationEventCallback+0xd4>
	} else if (event == SPI_EVENT_OVR_ERR) {
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d102      	bne.n	8000700 <SPI_ApplicationEventCallback+0xd4>
		SPI_ClearOVR(SPI2);
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <SPI_ApplicationEventCallback+0xf0>)
 80006fc:	f000 ff3d 	bl	800157a <SPI_ClearOVR>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000054 	.word	0x20000054
 800070c:	20000114 	.word	0x20000114
 8000710:	200000d8 	.word	0x200000d8
 8000714:	20000100 	.word	0x20000100
 8000718:	20000000 	.word	0x20000000
 800071c:	40003800 	.word	0x40003800

08000720 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <ITM_SendChar+0x48>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <ITM_SendChar+0x48>)
 8000730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000734:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <ITM_SendChar+0x4c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a0c      	ldr	r2, [pc, #48]	; (800076c <ITM_SendChar+0x4c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000742:	bf00      	nop
 8000744:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f8      	beq.n	8000744 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000752:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000edfc 	.word	0xe000edfc
 800076c:	e0000e00 	.word	0xe0000e00

08000770 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e00a      	b.n	8000798 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000782:	f3af 8000 	nop.w
 8000786:	4601      	mov	r1, r0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	60ba      	str	r2, [r7, #8]
 800078e:	b2ca      	uxtb	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbf0      	blt.n	8000782 <_read+0x12>
	}

return len;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	e009      	b.n	80007d0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	60ba      	str	r2, [r7, #8]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ffab 	bl	8000720 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dbf1      	blt.n	80007bc <_write+0x12>
	}
	return len;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_close>:

int _close(int file)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
	return -1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080a:	605a      	str	r2, [r3, #4]
	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <_isatty>:

int _isatty(int file)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	return 1;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x50>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x16>
		heap_end = &end;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <_sbrk+0x50>)
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <_sbrk+0x54>)
 8000860:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <_sbrk+0x50>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <_sbrk+0x50>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	466a      	mov	r2, sp
 8000872:	4293      	cmp	r3, r2
 8000874:	d907      	bls.n	8000886 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000876:	f000 fecb 	bl	8001610 <__errno>
 800087a:	4602      	mov	r2, r0
 800087c:	230c      	movs	r3, #12
 800087e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	e006      	b.n	8000894 <_sbrk+0x48>
	}

	heap_end += incr;
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <_sbrk+0x50>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a03      	ldr	r2, [pc, #12]	; (800089c <_sbrk+0x50>)
 8000890:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000108 	.word	0x20000108
 80008a0:	20000120 	.word	0x20000120

080008a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008d2:	f001 f82f 	bl	8001934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fd97 	bl	8000408 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   r0, =_estack
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80008e8:	08002574 	.word	0x08002574
  ldr r2, =_sbss
 80008ec:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80008f0:	2000011c 	.word	0x2000011c

080008f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == 1) {
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d162      	bne.n	80009d0 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a64      	ldr	r2, [pc, #400]	; (8000aa0 <GPIO_PeriClockControl+0x1a8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000912:	4b64      	ldr	r3, [pc, #400]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a63      	ldr	r2, [pc, #396]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 800091e:	e0b9      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a61      	ldr	r2, [pc, #388]	; (8000aa8 <GPIO_PeriClockControl+0x1b0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d106      	bne.n	8000936 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000928:	4b5e      	ldr	r3, [pc, #376]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a5d      	ldr	r2, [pc, #372]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000934:	e0ae      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a5c      	ldr	r2, [pc, #368]	; (8000aac <GPIO_PeriClockControl+0x1b4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800093e:	4b59      	ldr	r3, [pc, #356]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a58      	ldr	r2, [pc, #352]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
}
 800094a:	e0a3      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a58      	ldr	r2, [pc, #352]	; (8000ab0 <GPIO_PeriClockControl+0x1b8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d106      	bne.n	8000962 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000954:	4b53      	ldr	r3, [pc, #332]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a52      	ldr	r2, [pc, #328]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000960:	e098      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a53      	ldr	r2, [pc, #332]	; (8000ab4 <GPIO_PeriClockControl+0x1bc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800096a:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a4d      	ldr	r2, [pc, #308]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000976:	e08d      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <GPIO_PeriClockControl+0x1c0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000980:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4a47      	ldr	r2, [pc, #284]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000986:	f043 0320 	orr.w	r3, r3, #32
 800098a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800098c:	e082      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4a      	ldr	r2, [pc, #296]	; (8000abc <GPIO_PeriClockControl+0x1c4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000996:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a42      	ldr	r2, [pc, #264]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a2:	e077      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a46      	ldr	r2, [pc, #280]	; (8000ac0 <GPIO_PeriClockControl+0x1c8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d106      	bne.n	80009ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80009ac:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a3c      	ldr	r2, [pc, #240]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b8:	e06c      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a41      	ldr	r2, [pc, #260]	; (8000ac4 <GPIO_PeriClockControl+0x1cc>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d168      	bne.n	8000a94 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80009c2:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a37      	ldr	r2, [pc, #220]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ce:	e061      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a33      	ldr	r2, [pc, #204]	; (8000aa0 <GPIO_PeriClockControl+0x1a8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_EN();
 80009d8:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a31      	ldr	r2, [pc, #196]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e4:	e056      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <GPIO_PeriClockControl+0x1b0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d106      	bne.n	80009fc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a2c      	ldr	r2, [pc, #176]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 80009f4:	f023 0302 	bic.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009fa:	e04b      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a2b      	ldr	r2, [pc, #172]	; (8000aac <GPIO_PeriClockControl+0x1b4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a0a:	f023 0304 	bic.w	r3, r3, #4
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a10:	e040      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <GPIO_PeriClockControl+0x1b8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a20:	f023 0308 	bic.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a26:	e035      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <GPIO_PeriClockControl+0x1bc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d106      	bne.n	8000a3e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a36:	f023 0310 	bic.w	r3, r3, #16
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a3c:	e02a      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <GPIO_PeriClockControl+0x1c0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a4c:	f023 0320 	bic.w	r3, r3, #32
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a52:	e01f      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <GPIO_PeriClockControl+0x1c4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a68:	e014      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <GPIO_PeriClockControl+0x1c8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a7e:	e009      	b.n	8000a94 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <GPIO_PeriClockControl+0x1cc>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d105      	bne.n	8000a94 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <GPIO_PeriClockControl+0x1ac>)
 8000a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40021400 	.word	0x40021400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40021c00 	.word	0x40021c00
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <GPIO_Init>:

/*
 * Init and Di-
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, 1);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff0c 	bl	80008f8 <GPIO_PeriClockControl>

	// 1. Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	795b      	ldrb	r3, [r3, #5]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d820      	bhi.n	8000b2a <GPIO_Init+0x62>

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	461a      	mov	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	791b      	ldrb	r3, [r3, #4]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2103      	movs	r1, #3
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	400a      	ands	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	430a      	orrs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e0cb      	b.n	8000cc2 <GPIO_Init+0x1fa>

	} else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	795b      	ldrb	r3, [r3, #5]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d117      	bne.n	8000b62 <GPIO_Init+0x9a>

			// 1. Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b32:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <GPIO_Init+0x198>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	7912      	ldrb	r2, [r2, #4]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	408a      	lsls	r2, r1
 8000b40:	4611      	mov	r1, r2
 8000b42:	4a47      	ldr	r2, [pc, #284]	; (8000c60 <GPIO_Init+0x198>)
 8000b44:	430b      	orrs	r3, r1
 8000b46:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b48:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <GPIO_Init+0x198>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	7912      	ldrb	r2, [r2, #4]
 8000b50:	4611      	mov	r1, r2
 8000b52:	2201      	movs	r2, #1
 8000b54:	408a      	lsls	r2, r1
 8000b56:	43d2      	mvns	r2, r2
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <GPIO_Init+0x198>)
 8000b5c:	400b      	ands	r3, r1
 8000b5e:	6093      	str	r3, [r2, #8]
 8000b60:	e035      	b.n	8000bce <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_RT) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	795b      	ldrb	r3, [r3, #5]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d117      	bne.n	8000b9a <GPIO_Init+0xd2>

			// 1. Configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <GPIO_Init+0x198>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	7912      	ldrb	r2, [r2, #4]
 8000b72:	4611      	mov	r1, r2
 8000b74:	2201      	movs	r2, #1
 8000b76:	408a      	lsls	r2, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a39      	ldr	r2, [pc, #228]	; (8000c60 <GPIO_Init+0x198>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b80:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <GPIO_Init+0x198>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	7912      	ldrb	r2, [r2, #4]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	408a      	lsls	r2, r1
 8000b8e:	43d2      	mvns	r2, r2
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a33      	ldr	r2, [pc, #204]	; (8000c60 <GPIO_Init+0x198>)
 8000b94:	400b      	ands	r3, r1
 8000b96:	60d3      	str	r3, [r2, #12]
 8000b98:	e019      	b.n	8000bce <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	795b      	ldrb	r3, [r3, #5]
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d115      	bne.n	8000bce <GPIO_Init+0x106>

			// 1. Configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <GPIO_Init+0x198>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	7912      	ldrb	r2, [r2, #4]
 8000baa:	4611      	mov	r1, r2
 8000bac:	2201      	movs	r2, #1
 8000bae:	408a      	lsls	r2, r1
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <GPIO_Init+0x198>)
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <GPIO_Init+0x198>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	7912      	ldrb	r2, [r2, #4]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	408a      	lsls	r2, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <GPIO_Init+0x198>)
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	60d3      	str	r3, [r2, #12]

		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	791b      	ldrb	r3, [r3, #4]
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO(pGPIOHandle->pGPIOx);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <GPIO_Init+0x19c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d04e      	beq.n	8000c88 <GPIO_Init+0x1c0>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <GPIO_Init+0x1a0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d032      	beq.n	8000c5a <GPIO_Init+0x192>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <GPIO_Init+0x1a4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d02b      	beq.n	8000c56 <GPIO_Init+0x18e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <GPIO_Init+0x1a8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d024      	beq.n	8000c52 <GPIO_Init+0x18a>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <GPIO_Init+0x1ac>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01d      	beq.n	8000c4e <GPIO_Init+0x186>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <GPIO_Init+0x1b0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d016      	beq.n	8000c4a <GPIO_Init+0x182>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <GPIO_Init+0x1b4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d00f      	beq.n	8000c46 <GPIO_Init+0x17e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <GPIO_Init+0x1b8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d008      	beq.n	8000c42 <GPIO_Init+0x17a>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <GPIO_Init+0x1bc>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <GPIO_Init+0x176>
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	e025      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e023      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c42:	2307      	movs	r3, #7
 8000c44:	e021      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c46:	2306      	movs	r3, #6
 8000c48:	e01f      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	e01d      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c4e:	2304      	movs	r3, #4
 8000c50:	e01b      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c52:	2303      	movs	r3, #3
 8000c54:	e019      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e017      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e015      	b.n	8000c8a <GPIO_Init+0x1c2>
 8000c5e:	bf00      	nop
 8000c60:	40013c00 	.word	0x40013c00
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40021400 	.word	0x40021400
 8000c7c:	40021800 	.word	0x40021800
 8000c80:	40021c00 	.word	0x40021c00
 8000c84:	40022000 	.word	0x40022000
 8000c88:	2300      	movs	r3, #0
 8000c8a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c8c:	4b5d      	ldr	r3, [pc, #372]	; (8000e04 <GPIO_Init+0x33c>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	4a5c      	ldr	r2, [pc, #368]	; (8000e04 <GPIO_Init+0x33c>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] =  portcode << ( 4 * temp2 );
 8000c98:	7c7a      	ldrb	r2, [r7, #17]
 8000c9a:	7cbb      	ldrb	r3, [r7, #18]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f103 	lsl.w	r1, r2, r3
 8000ca2:	4a59      	ldr	r2, [pc, #356]	; (8000e08 <GPIO_Init+0x340>)
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cac:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <GPIO_Init+0x344>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	7912      	ldrb	r2, [r2, #4]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	408a      	lsls	r2, r1
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4a53      	ldr	r2, [pc, #332]	; (8000e0c <GPIO_Init+0x344>)
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	799b      	ldrb	r3, [r3, #6]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6899      	ldr	r1, [r3, #8]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	79db      	ldrb	r3, [r3, #7]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	791b      	ldrb	r3, [r3, #4]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	791b      	ldrb	r3, [r3, #4]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2103      	movs	r1, #3
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4619      	mov	r1, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	400a      	ands	r2, r1
 8000d38:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68d9      	ldr	r1, [r3, #12]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]

	// 4. Configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	4619      	mov	r1, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	400a      	ands	r2, r1
 8000d78:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6859      	ldr	r1, [r3, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]

	// 5. Configure the alternate functionality if required
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	795b      	ldrb	r3, [r3, #5]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d131      	bne.n	8000dfa <GPIO_Init+0x332>

		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	791b      	ldrb	r3, [r3, #4]
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	791b      	ldrb	r3, [r3, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	7c3a      	ldrb	r2, [r7, #16]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	7c3a      	ldrb	r2, [r7, #16]
 8000dc8:	4001      	ands	r1, r0
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 );
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	7c3a      	ldrb	r2, [r7, #16]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7a5b      	ldrb	r3, [r3, #9]
 8000de0:	461a      	mov	r2, r3
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	7c3a      	ldrb	r2, [r7, #16]
 8000df2:	4301      	orrs	r1, r0
 8000df4:	3208      	adds	r2, #8
 8000df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40013c00 	.word	0x40013c00

08000e10 <GPIO_IRQInterruptConfig>:
}

/*
 * IRQ Config and ISR Handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]

	if (EnorDi == 1) {
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d133      	bne.n	8000e8e <GPIO_IRQInterruptConfig+0x7e>

		if (IRQNumber <= 31) {
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b1f      	cmp	r3, #31
 8000e2a:	d80a      	bhi.n	8000e42 <GPIO_IRQInterruptConfig+0x32>
			// ISER0 Register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000e2c:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <GPIO_IRQInterruptConfig+0xf4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f202 	lsl.w	r2, r1, r2
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4a32      	ldr	r2, [pc, #200]	; (8000f04 <GPIO_IRQInterruptConfig+0xf4>)
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	6013      	str	r3, [r2, #0]

		}

	}

}
 8000e40:	e059      	b.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b1f      	cmp	r3, #31
 8000e46:	d90f      	bls.n	8000e68 <GPIO_IRQInterruptConfig+0x58>
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e4c:	d80c      	bhi.n	8000e68 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32));
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <GPIO_IRQInterruptConfig+0xf8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	f002 021f 	and.w	r2, r2, #31
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <GPIO_IRQInterruptConfig+0xf8>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e046      	b.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber < 64  && IRQNumber < 95) {
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e6c:	d843      	bhi.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b5e      	cmp	r3, #94	; 0x5e
 8000e72:	d840      	bhi.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64));
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <GPIO_IRQInterruptConfig+0xfc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	4611      	mov	r1, r2
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <GPIO_IRQInterruptConfig+0xfc>)
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	e033      	b.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b1f      	cmp	r3, #31
 8000e92:	d80a      	bhi.n	8000eaa <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <GPIO_IRQInterruptConfig+0x100>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <GPIO_IRQInterruptConfig+0x100>)
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	e025      	b.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b1f      	cmp	r3, #31
 8000eae:	d90f      	bls.n	8000ed0 <GPIO_IRQInterruptConfig+0xc0>
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb4:	d80c      	bhi.n	8000ed0 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32));
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <GPIO_IRQInterruptConfig+0x104>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	f002 021f 	and.w	r2, r2, #31
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <GPIO_IRQInterruptConfig+0x104>)
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e012      	b.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber < 64  && IRQNumber < 95) {
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ed4:	d80f      	bhi.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b5e      	cmp	r3, #94	; 0x5e
 8000eda:	d80c      	bhi.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64));
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <GPIO_IRQInterruptConfig+0x108>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	4611      	mov	r1, r2
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <GPIO_IRQInterruptConfig+0x108>)
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	e7ff      	b.n	8000ef6 <GPIO_IRQInterruptConfig+0xe6>
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000e104 	.word	0xe000e104
 8000f0c:	e000e108 	.word	0xe000e108
 8000f10:	e000e180 	.word	0xe000e180
 8000f14:	e000e184 	.word	0xe000e184
 8000f18:	e000e188 	.word	0xe000e188

08000f1c <GPIO_IRQHandling>:
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + (iprx * 4)) |= (IRQPriority << shift_amount);

}

void GPIO_IRQHandling(uint8_t PinNumber){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]

	if (EXTI->PR & (1 << PinNumber)) {
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <GPIO_IRQHandling+0x3c>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	79fa      	ldrb	r2, [r7, #7]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d009      	beq.n	8000f4c <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <GPIO_IRQHandling+0x3c>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4611      	mov	r1, r2
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <GPIO_IRQHandling+0x3c>)
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6153      	str	r3, [r2, #20]
	}

}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <SPI_PeriClockControl>:

/*
 * Peripheral Clock setup
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnDi) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]

	if (EnDi == 1) {
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d120      	bne.n	8000fb0 <SPI_PeriClockControl+0x54>
		if (pSPIx == SPI1) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <SPI_PeriClockControl+0xa0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
		} else if (pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}

}
 8000f82:	e035      	b.n	8000ff0 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI2) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <SPI_PeriClockControl+0xa8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d106      	bne.n	8000f9a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f98:	e02a      	b.n	8000ff0 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI3) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <SPI_PeriClockControl+0xac>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d126      	bne.n	8000ff0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a16      	ldr	r2, [pc, #88]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fae:	e01f      	b.n	8000ff0 <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <SPI_PeriClockControl+0xa0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d106      	bne.n	8000fc6 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fc2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fc4:	e014      	b.n	8000ff0 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI2) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <SPI_PeriClockControl+0xa8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d106      	bne.n	8000fdc <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fda:	e009      	b.n	8000ff0 <SPI_PeriClockControl+0x94>
		} else if (pSPIx == SPI3) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SPI_PeriClockControl+0xac>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d105      	bne.n	8000ff0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SPI_PeriClockControl+0xa4>)
 8000fea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40013000 	.word	0x40013000
 8001000:	40023800 	.word	0x40023800
 8001004:	40003800 	.word	0x40003800
 8001008:	40003c00 	.word	0x40003c00

0800100c <SPI_Init>:

/*
 * Init and De-Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	// Configure the SPI_CR1 Register
	uint32_t tempreg = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx, 1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff9c 	bl	8000f5c <SPI_PeriClockControl>

	// 1. Configure the Device mode ( << 2)
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
	// pSPIHandle->pSPIx->CR1.MSTR = pSPIHandle->SPIConfig.SPI_DeviceMode [with object oriented approach]

	// 2. Configure the BusConfig
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	795b      	ldrb	r3, [r3, #5]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d104      	bne.n	8001044 <SPI_Init+0x38>

		tempreg &= ~(1 << 15);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e014      	b.n	800106e <SPI_Init+0x62>

	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	795b      	ldrb	r3, [r3, #5]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d104      	bne.n	8001056 <SPI_Init+0x4a>

		tempreg |= (1 << 15);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e00b      	b.n	800106e <SPI_Init+0x62>

	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	795b      	ldrb	r3, [r3, #5]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d107      	bne.n	800106e <SPI_Init+0x62>

		tempreg &= ~(1 << 15);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001064:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << 10);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106c:	60fb      	str	r3, [r7, #12]

	}

	// 3. Configure the SCLK Speed
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	799b      	ldrb	r3, [r3, #6]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]

	// 4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	79db      	ldrb	r3, [r3, #7]
 8001080:	02db      	lsls	r3, r3, #11
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7a1b      	ldrb	r3, [r3, #8]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	461a      	mov	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

	// 6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7a5b      	ldrb	r3, [r3, #9]
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

	// 7. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7a9b      	ldrb	r3, [r3, #10]
 80010a8:	025b      	lsls	r3, r3, #9
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	601a      	str	r2, [r3, #0]

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <SPI_IRQInterruptConfig>:
}

/*
 * IRQ Configuration and ISR Handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == 1) {
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d133      	bne.n	8001142 <SPI_IRQInterruptConfig+0x7e>

		if (IRQNumber <= 31) {
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b1f      	cmp	r3, #31
 80010de:	d80a      	bhi.n	80010f6 <SPI_IRQInterruptConfig+0x32>
			// ISER0 Register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80010e0:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <SPI_IRQInterruptConfig+0xf4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	79fa      	ldrb	r2, [r7, #7]
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ec:	4611      	mov	r1, r2
 80010ee:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <SPI_IRQInterruptConfig+0xf4>)
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64));

		}

	}
}
 80010f4:	e059      	b.n	80011aa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b1f      	cmp	r3, #31
 80010fa:	d90f      	bls.n	800111c <SPI_IRQInterruptConfig+0x58>
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001100:	d80c      	bhi.n	800111c <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32));
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <SPI_IRQInterruptConfig+0xf8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	f002 021f 	and.w	r2, r2, #31
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	4611      	mov	r1, r2
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <SPI_IRQInterruptConfig+0xf8>)
 8001116:	430b      	orrs	r3, r1
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e046      	b.n	80011aa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber < 64  && IRQNumber < 95) {
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b3f      	cmp	r3, #63	; 0x3f
 8001120:	d843      	bhi.n	80011aa <SPI_IRQInterruptConfig+0xe6>
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b5e      	cmp	r3, #94	; 0x5e
 8001126:	d840      	bhi.n	80011aa <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64));
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <SPI_IRQInterruptConfig+0xfc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <SPI_IRQInterruptConfig+0xfc>)
 800113c:	430b      	orrs	r3, r1
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	e033      	b.n	80011aa <SPI_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b1f      	cmp	r3, #31
 8001146:	d80a      	bhi.n	800115e <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <SPI_IRQInterruptConfig+0x100>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	4611      	mov	r1, r2
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <SPI_IRQInterruptConfig+0x100>)
 8001158:	430b      	orrs	r3, r1
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	e025      	b.n	80011aa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b1f      	cmp	r3, #31
 8001162:	d90f      	bls.n	8001184 <SPI_IRQInterruptConfig+0xc0>
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b3f      	cmp	r3, #63	; 0x3f
 8001168:	d80c      	bhi.n	8001184 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32));
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <SPI_IRQInterruptConfig+0x104>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	79fa      	ldrb	r2, [r7, #7]
 8001170:	f002 021f 	and.w	r2, r2, #31
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	4611      	mov	r1, r2
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <SPI_IRQInterruptConfig+0x104>)
 800117e:	430b      	orrs	r3, r1
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e012      	b.n	80011aa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber < 64  && IRQNumber < 95) {
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b3f      	cmp	r3, #63	; 0x3f
 8001188:	d80f      	bhi.n	80011aa <SPI_IRQInterruptConfig+0xe6>
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b5e      	cmp	r3, #94	; 0x5e
 800118e:	d80c      	bhi.n	80011aa <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64));
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <SPI_IRQInterruptConfig+0x108>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800119a:	2101      	movs	r1, #1
 800119c:	fa01 f202 	lsl.w	r2, r1, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SPI_IRQInterruptConfig+0x108>)
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	e7ff      	b.n	80011aa <SPI_IRQInterruptConfig+0xe6>
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000e104 	.word	0xe000e104
 80011c0:	e000e108 	.word	0xe000e108
 80011c4:	e000e180 	.word	0xe000e180
 80011c8:	e000e184 	.word	0xe000e184
 80011cc:	e000e188 	.word	0xe000e188

080011d0 <SPI_PeripheralControl>:
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle);

/*
 * Other SPI Peripheral Control
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == 1) {
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d106      	bne.n	80011f0 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= ( 1 << 6 );
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~( 1 << 6 );
	}

}
 80011ee:	e005      	b.n	80011fc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~( 1 << 6 );
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SPI_SSOEConfig>:
	}


}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == 1) {
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d106      	bne.n	8001228 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= ( 1 << 2 );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f043 0204 	orr.w	r2, r3, #4
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~( 1 << 2 );
	}


}
 8001226:	e005      	b.n	8001234 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~( 1 << 2 );
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f023 0204 	bic.w	r2, r3, #4
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	605a      	str	r2, [r3, #4]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SPI_GetStatus>:

uint8_t SPI_GetStatus(SPI_RegDef_t *pSPIx, uint8_t flag) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]

	if ( (pSPIx->SR >> flag) & 0x1 ) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SPI_GetStatus+0x22>
		return 1;
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <SPI_GetStatus+0x24>
	} else {
		return 0;
 8001262:	2300      	movs	r3, #0
	}

}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SPI_SendArgsIT>:

uint8_t SPI_SendArgsIT(SPI_Handle_t *pSPIHandle, command *commando, uint32_t len) {
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]

	// while loop constantly checking the following state (clever trick)
	uint8_t state = pSPIHandle->TxState;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001282:	75fb      	strb	r3, [r7, #23]

	// check
	if (state != SPI_BUSY_IN_TX) {
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d012      	beq.n	80012b0 <SPI_SendArgsIT+0x40>

		// 1. Save the TX Buffer address and Len info in some global variables
		pSPIHandle->args = (uint8_t **)commando->args;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1d1a      	adds	r2, r3, #4
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	611a      	str	r2, [r3, #16]
		pSPIHandle->TxLen = len;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]

		// 2. Mark the SPI as busy in transmission so that no other code can take over the same SPI peripheral until the transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Enable the TXIE control bit to get the interrupt whenever the TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << 7);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ae:	605a      	str	r2, [r3, #4]

		// 4. Data Transmission will be handled by the ISR Code (implemented).

	}

	return pSPIHandle->TxState;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f893 3020 	ldrb.w	r3, [r3, #32]

}
 80012b6:	4618      	mov	r0, r3
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <SPI_SendDataIT>:


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t len) {
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]

	// while loop constantly checking the following state (clever trick)
	uint8_t state = pSPIHandle->TxState;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d4:	75fb      	strb	r3, [r7, #23]

	// check
	if (state != SPI_BUSY_IN_TX) {
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d011      	beq.n	8001300 <SPI_SendDataIT+0x3e>

		// 1. Save the TX Buffer address and Len info in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = len;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]

		// 2. Mark the SPI as busy in transmission so that no other code can take over the same SPI peripheral until the transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2202      	movs	r2, #2
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Enable the TXIE control bit to get the interrupt whenever the TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << 7);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012fe:	605a      	str	r2, [r3, #4]

		// 4. Data Transmission will be handled by the ISR Code (implemented).

	}

	return pSPIHandle->TxState;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 3020 	ldrb.w	r3, [r3, #32]

}
 8001306:	4618      	mov	r0, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <SPI_ReceiveIT>:

uint8_t SPI_ReceiveIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t len) {
 8001312:	b480      	push	{r7}
 8001314:	b087      	sub	sp, #28
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]

	// while loop constantly checking the following state (clever trick)
	uint8_t state = pSPIHandle->RxState;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001324:	75fb      	strb	r3, [r7, #23]

	// check
	if (state != SPI_BUSY_IN_RX) {
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d011      	beq.n	8001350 <SPI_ReceiveIT+0x3e>

		// 1. Save the RX Buffer address and Len info in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	615a      	str	r2, [r3, #20]
		pSPIHandle->RxLen = len;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	61da      	str	r2, [r3, #28]

		// 2. Mark the SPI as busy in transmission so that no other code can take over the same SPI peripheral until the reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// 3. Enable the RXE control bit to get the interrupt whenever the RXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << 6);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800134e:	605a      	str	r2, [r3, #4]

		// 4. Data Transmission will be handled by the ISR Code (implemented).

	}

	return pSPIHandle->RxState;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21

}
 8001356:	4618      	mov	r0, r3
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <spi_txe_handle>:


// Handler functions

void static spi_txe_handle(SPI_Handle_t *pSPIHandle) {
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]

	while (pSPIHandle->TxLen > 0) {
 800136a:	e03e      	b.n	80013ea <spi_txe_handle+0x88>
		if ( ((pSPIHandle->pSPIx->CR1 >> 11) & 0x1) ) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	0adb      	lsrs	r3, r3, #11
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d015      	beq.n	80013a8 <spi_txe_handle+0x46>
			pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60da      	str	r2, [r3, #12]
			pSPIHandle->TxLen--;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
			pSPIHandle->TxLen--;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
			(uint16_t*)pSPIHandle->pTxBuffer++;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	e020      	b.n	80013ea <spi_txe_handle+0x88>
		} else {
			if ( (*(pSPIHandle->args)) != 0 ) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <spi_txe_handle+0x68>
				pSPIHandle->pSPIx->DR = *(pSPIHandle->args);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60da      	str	r2, [r3, #12]
				pSPIHandle->args++;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	1d1a      	adds	r2, r3, #4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	e00a      	b.n	80013e0 <spi_txe_handle+0x7e>
			} else {
				pSPIHandle->pSPIx->DR = *(pSPIHandle->pTxBuffer);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60da      	str	r2, [r3, #12]
				pSPIHandle->pTxBuffer++;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60da      	str	r2, [r3, #12]
			}
			pSPIHandle->TxLen--;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	1e5a      	subs	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
	while (pSPIHandle->TxLen > 0) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1bc      	bne.n	800136c <spi_txe_handle+0xa>
		}
	}


	if (!pSPIHandle->TxLen) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <spi_txe_handle+0xa6>
		// close SPI transmission - prevents interrupts from TXE
		SPI_CloseTransmission(pSPIHandle);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f8cd 	bl	800159a <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8001400:	2101      	movs	r1, #1
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff f912 	bl	800062c <SPI_ApplicationEventCallback>

	}

}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <spi_rxe_handle>:

void static spi_rxe_handle(SPI_Handle_t *pSPIHandle) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

	while (pSPIHandle->RxLen > 0) {
 8001418:	e02f      	b.n	800147a <spi_rxe_handle+0x6a>
		if ( ((pSPIHandle->pSPIx->CR1 >> 11) & 0x1) ) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0adb      	lsrs	r3, r3, #11
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <spi_rxe_handle+0x48>
			*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	b292      	uxth	r2, r2
 8001436:	801a      	strh	r2, [r3, #0]
			pSPIHandle->RxLen--;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	61da      	str	r2, [r3, #28]
			pSPIHandle->RxLen--;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	61da      	str	r2, [r3, #28]
			(uint16_t*)pSPIHandle->pRxBuffer++;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	e010      	b.n	800147a <spi_rxe_handle+0x6a>
		} else {
			*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
			pSPIHandle->RxLen--;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	61da      	str	r2, [r3, #28]
			pSPIHandle->pRxBuffer++;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	615a      	str	r2, [r3, #20]
	while (pSPIHandle->RxLen > 0) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1cb      	bne.n	800141a <spi_rxe_handle+0xa>
		}
	}

	if (!pSPIHandle->RxLen) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <spi_rxe_handle+0x88>
		// close SPI transmission - prevents interrupts from TXE
		SPI_CloseReception(pSPIHandle);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f8a4 	bl	80015d8 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8001490:	2102      	movs	r1, #2
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff f8ca 	bl	800062c <SPI_ApplicationEventCallback>

	}

}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <spi_ovr_handle>:

void static spi_ovr_handle(SPI_Handle_t *pSPIHandle) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	// 1. Clear the ovr flag
	if (pSPIHandle->TxState != SPI_BUSY_IN_TX) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d007      	beq.n	80014c2 <spi_ovr_handle+0x22>
		temp = pSPIHandle->pSPIx->DR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	// 2. Inform the application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 80014c2:	2103      	movs	r1, #3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff f8b1 	bl	800062c <SPI_ApplicationEventCallback>

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <SPI_IRQHandling>:

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle) {
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]

	uint8_t temp1, temp2;

	// Check for TXE
	temp1 = (pSPIHandle->pSPIx->SR >> 1) & 1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 >> 7) & 1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	09db      	lsrs	r3, r3, #7
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2) {
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <SPI_IRQHandling+0x3c>
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <SPI_IRQHandling+0x3c>
		// Handle TXE
		spi_txe_handle(pSPIHandle);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff2b 	bl	8001362 <spi_txe_handle>
		return;
 800150c:	e032      	b.n	8001574 <SPI_IRQHandling+0xa2>
	}

	// check for RXE
	temp1 = (pSPIHandle->pSPIx->SR >> 0) & 1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 >> 6) & 1;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	099b      	lsrs	r3, r3, #6
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2) {
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <SPI_IRQHandling+0x6e>
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <SPI_IRQHandling+0x6e>
		// Handle TXE
		spi_rxe_handle(pSPIHandle);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff69 	bl	8001410 <spi_rxe_handle>
		return;
 800153e:	e019      	b.n	8001574 <SPI_IRQHandling+0xa2>
	}

	// check for ERR [OVR]
	temp1 = (pSPIHandle->pSPIx->SR >> 6) & 1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 >> 4) & 1;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2) {
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <SPI_IRQHandling+0xa2>
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <SPI_IRQHandling+0xa2>
		// Handle TXE
		spi_ovr_handle(pSPIHandle);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff97 	bl	80014a0 <spi_ovr_handle>
		return;
 8001572:	bf00      	nop
	}

}
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <SPI_ClearOVR>:

void SPI_ClearOVR(SPI_RegDef_t *pSPIx) {
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	temp = pSPIx->DR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	73fb      	strb	r3, [r7, #15]
	temp = pSPIx->SR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	73fb      	strb	r3, [r7, #15]

	(void)temp;
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <SPI_CloseTransmission>:
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle) {
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << 7 );
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b0:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
	pSPIHandle->args = NULL;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
	pSPIHandle->TxLen = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
	pSPIHandle->TxState = SPI_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2020 	strb.w	r2, [r3, #32]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <SPI_CloseReception>:
void SPI_CloseReception(SPI_Handle_t *pSPIHandle) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << 6 );
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ee:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
	pSPIHandle->RxLen = 0;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
	pSPIHandle->RxState = SPI_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <__errno>:
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <__errno+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000058 	.word	0x20000058

0800161c <__sflush_r>:
 800161c:	898a      	ldrh	r2, [r1, #12]
 800161e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001622:	4605      	mov	r5, r0
 8001624:	0710      	lsls	r0, r2, #28
 8001626:	460c      	mov	r4, r1
 8001628:	d458      	bmi.n	80016dc <__sflush_r+0xc0>
 800162a:	684b      	ldr	r3, [r1, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dc05      	bgt.n	800163c <__sflush_r+0x20>
 8001630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	dc02      	bgt.n	800163c <__sflush_r+0x20>
 8001636:	2000      	movs	r0, #0
 8001638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800163c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800163e:	2e00      	cmp	r6, #0
 8001640:	d0f9      	beq.n	8001636 <__sflush_r+0x1a>
 8001642:	2300      	movs	r3, #0
 8001644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001648:	682f      	ldr	r7, [r5, #0]
 800164a:	6a21      	ldr	r1, [r4, #32]
 800164c:	602b      	str	r3, [r5, #0]
 800164e:	d032      	beq.n	80016b6 <__sflush_r+0x9a>
 8001650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001652:	89a3      	ldrh	r3, [r4, #12]
 8001654:	075a      	lsls	r2, r3, #29
 8001656:	d505      	bpl.n	8001664 <__sflush_r+0x48>
 8001658:	6863      	ldr	r3, [r4, #4]
 800165a:	1ac0      	subs	r0, r0, r3
 800165c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800165e:	b10b      	cbz	r3, 8001664 <__sflush_r+0x48>
 8001660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001662:	1ac0      	subs	r0, r0, r3
 8001664:	2300      	movs	r3, #0
 8001666:	4602      	mov	r2, r0
 8001668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800166a:	6a21      	ldr	r1, [r4, #32]
 800166c:	4628      	mov	r0, r5
 800166e:	47b0      	blx	r6
 8001670:	1c43      	adds	r3, r0, #1
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	d106      	bne.n	8001684 <__sflush_r+0x68>
 8001676:	6829      	ldr	r1, [r5, #0]
 8001678:	291d      	cmp	r1, #29
 800167a:	d848      	bhi.n	800170e <__sflush_r+0xf2>
 800167c:	4a29      	ldr	r2, [pc, #164]	; (8001724 <__sflush_r+0x108>)
 800167e:	40ca      	lsrs	r2, r1
 8001680:	07d6      	lsls	r6, r2, #31
 8001682:	d544      	bpl.n	800170e <__sflush_r+0xf2>
 8001684:	2200      	movs	r2, #0
 8001686:	6062      	str	r2, [r4, #4]
 8001688:	04d9      	lsls	r1, r3, #19
 800168a:	6922      	ldr	r2, [r4, #16]
 800168c:	6022      	str	r2, [r4, #0]
 800168e:	d504      	bpl.n	800169a <__sflush_r+0x7e>
 8001690:	1c42      	adds	r2, r0, #1
 8001692:	d101      	bne.n	8001698 <__sflush_r+0x7c>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b903      	cbnz	r3, 800169a <__sflush_r+0x7e>
 8001698:	6560      	str	r0, [r4, #84]	; 0x54
 800169a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800169c:	602f      	str	r7, [r5, #0]
 800169e:	2900      	cmp	r1, #0
 80016a0:	d0c9      	beq.n	8001636 <__sflush_r+0x1a>
 80016a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016a6:	4299      	cmp	r1, r3
 80016a8:	d002      	beq.n	80016b0 <__sflush_r+0x94>
 80016aa:	4628      	mov	r0, r5
 80016ac:	f000 f96e 	bl	800198c <_free_r>
 80016b0:	2000      	movs	r0, #0
 80016b2:	6360      	str	r0, [r4, #52]	; 0x34
 80016b4:	e7c0      	b.n	8001638 <__sflush_r+0x1c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	4628      	mov	r0, r5
 80016ba:	47b0      	blx	r6
 80016bc:	1c41      	adds	r1, r0, #1
 80016be:	d1c8      	bne.n	8001652 <__sflush_r+0x36>
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0c5      	beq.n	8001652 <__sflush_r+0x36>
 80016c6:	2b1d      	cmp	r3, #29
 80016c8:	d001      	beq.n	80016ce <__sflush_r+0xb2>
 80016ca:	2b16      	cmp	r3, #22
 80016cc:	d101      	bne.n	80016d2 <__sflush_r+0xb6>
 80016ce:	602f      	str	r7, [r5, #0]
 80016d0:	e7b1      	b.n	8001636 <__sflush_r+0x1a>
 80016d2:	89a3      	ldrh	r3, [r4, #12]
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	81a3      	strh	r3, [r4, #12]
 80016da:	e7ad      	b.n	8001638 <__sflush_r+0x1c>
 80016dc:	690f      	ldr	r7, [r1, #16]
 80016de:	2f00      	cmp	r7, #0
 80016e0:	d0a9      	beq.n	8001636 <__sflush_r+0x1a>
 80016e2:	0793      	lsls	r3, r2, #30
 80016e4:	680e      	ldr	r6, [r1, #0]
 80016e6:	bf08      	it	eq
 80016e8:	694b      	ldreq	r3, [r1, #20]
 80016ea:	600f      	str	r7, [r1, #0]
 80016ec:	bf18      	it	ne
 80016ee:	2300      	movne	r3, #0
 80016f0:	eba6 0807 	sub.w	r8, r6, r7
 80016f4:	608b      	str	r3, [r1, #8]
 80016f6:	f1b8 0f00 	cmp.w	r8, #0
 80016fa:	dd9c      	ble.n	8001636 <__sflush_r+0x1a>
 80016fc:	4643      	mov	r3, r8
 80016fe:	463a      	mov	r2, r7
 8001700:	6a21      	ldr	r1, [r4, #32]
 8001702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001704:	4628      	mov	r0, r5
 8001706:	47b0      	blx	r6
 8001708:	2800      	cmp	r0, #0
 800170a:	dc06      	bgt.n	800171a <__sflush_r+0xfe>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001712:	81a3      	strh	r3, [r4, #12]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	e78e      	b.n	8001638 <__sflush_r+0x1c>
 800171a:	4407      	add	r7, r0
 800171c:	eba8 0800 	sub.w	r8, r8, r0
 8001720:	e7e9      	b.n	80016f6 <__sflush_r+0xda>
 8001722:	bf00      	nop
 8001724:	20400001 	.word	0x20400001

08001728 <_fflush_r>:
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	690b      	ldr	r3, [r1, #16]
 800172c:	4605      	mov	r5, r0
 800172e:	460c      	mov	r4, r1
 8001730:	b1db      	cbz	r3, 800176a <_fflush_r+0x42>
 8001732:	b118      	cbz	r0, 800173c <_fflush_r+0x14>
 8001734:	6983      	ldr	r3, [r0, #24]
 8001736:	b90b      	cbnz	r3, 800173c <_fflush_r+0x14>
 8001738:	f000 f872 	bl	8001820 <__sinit>
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <_fflush_r+0x48>)
 800173e:	429c      	cmp	r4, r3
 8001740:	d109      	bne.n	8001756 <_fflush_r+0x2e>
 8001742:	686c      	ldr	r4, [r5, #4]
 8001744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001748:	b17b      	cbz	r3, 800176a <_fflush_r+0x42>
 800174a:	4621      	mov	r1, r4
 800174c:	4628      	mov	r0, r5
 800174e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001752:	f7ff bf63 	b.w	800161c <__sflush_r>
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_fflush_r+0x4c>)
 8001758:	429c      	cmp	r4, r3
 800175a:	d101      	bne.n	8001760 <_fflush_r+0x38>
 800175c:	68ac      	ldr	r4, [r5, #8]
 800175e:	e7f1      	b.n	8001744 <_fflush_r+0x1c>
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <_fflush_r+0x50>)
 8001762:	429c      	cmp	r4, r3
 8001764:	bf08      	it	eq
 8001766:	68ec      	ldreq	r4, [r5, #12]
 8001768:	e7ec      	b.n	8001744 <_fflush_r+0x1c>
 800176a:	2000      	movs	r0, #0
 800176c:	bd38      	pop	{r3, r4, r5, pc}
 800176e:	bf00      	nop
 8001770:	080024f4 	.word	0x080024f4
 8001774:	08002514 	.word	0x08002514
 8001778:	080024d4 	.word	0x080024d4

0800177c <fflush>:
 800177c:	4601      	mov	r1, r0
 800177e:	b920      	cbnz	r0, 800178a <fflush+0xe>
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <fflush+0x18>)
 8001782:	4905      	ldr	r1, [pc, #20]	; (8001798 <fflush+0x1c>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f000 b8b7 	b.w	80018f8 <_fwalk_reent>
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <fflush+0x20>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	f7ff bfcb 	b.w	8001728 <_fflush_r>
 8001792:	bf00      	nop
 8001794:	08002534 	.word	0x08002534
 8001798:	08001729 	.word	0x08001729
 800179c:	20000058 	.word	0x20000058

080017a0 <std>:
 80017a0:	2300      	movs	r3, #0
 80017a2:	b510      	push	{r4, lr}
 80017a4:	4604      	mov	r4, r0
 80017a6:	e9c0 3300 	strd	r3, r3, [r0]
 80017aa:	6083      	str	r3, [r0, #8]
 80017ac:	8181      	strh	r1, [r0, #12]
 80017ae:	6643      	str	r3, [r0, #100]	; 0x64
 80017b0:	81c2      	strh	r2, [r0, #14]
 80017b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017b6:	6183      	str	r3, [r0, #24]
 80017b8:	4619      	mov	r1, r3
 80017ba:	2208      	movs	r2, #8
 80017bc:	305c      	adds	r0, #92	; 0x5c
 80017be:	f000 f8dd 	bl	800197c <memset>
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <std+0x38>)
 80017c4:	6263      	str	r3, [r4, #36]	; 0x24
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <std+0x3c>)
 80017c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <std+0x40>)
 80017cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <std+0x44>)
 80017d0:	6224      	str	r4, [r4, #32]
 80017d2:	6323      	str	r3, [r4, #48]	; 0x30
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	bf00      	nop
 80017d8:	08001b2d 	.word	0x08001b2d
 80017dc:	08001b4f 	.word	0x08001b4f
 80017e0:	08001b87 	.word	0x08001b87
 80017e4:	08001bab 	.word	0x08001bab

080017e8 <_cleanup_r>:
 80017e8:	4901      	ldr	r1, [pc, #4]	; (80017f0 <_cleanup_r+0x8>)
 80017ea:	f000 b885 	b.w	80018f8 <_fwalk_reent>
 80017ee:	bf00      	nop
 80017f0:	08001729 	.word	0x08001729

080017f4 <__sfmoreglue>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	1e4a      	subs	r2, r1, #1
 80017f8:	2568      	movs	r5, #104	; 0x68
 80017fa:	4355      	muls	r5, r2
 80017fc:	460e      	mov	r6, r1
 80017fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001802:	f000 f911 	bl	8001a28 <_malloc_r>
 8001806:	4604      	mov	r4, r0
 8001808:	b140      	cbz	r0, 800181c <__sfmoreglue+0x28>
 800180a:	2100      	movs	r1, #0
 800180c:	e9c0 1600 	strd	r1, r6, [r0]
 8001810:	300c      	adds	r0, #12
 8001812:	60a0      	str	r0, [r4, #8]
 8001814:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001818:	f000 f8b0 	bl	800197c <memset>
 800181c:	4620      	mov	r0, r4
 800181e:	bd70      	pop	{r4, r5, r6, pc}

08001820 <__sinit>:
 8001820:	6983      	ldr	r3, [r0, #24]
 8001822:	b510      	push	{r4, lr}
 8001824:	4604      	mov	r4, r0
 8001826:	bb33      	cbnz	r3, 8001876 <__sinit+0x56>
 8001828:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800182c:	6503      	str	r3, [r0, #80]	; 0x50
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <__sinit+0x58>)
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <__sinit+0x5c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6282      	str	r2, [r0, #40]	; 0x28
 8001836:	4298      	cmp	r0, r3
 8001838:	bf04      	itt	eq
 800183a:	2301      	moveq	r3, #1
 800183c:	6183      	streq	r3, [r0, #24]
 800183e:	f000 f81f 	bl	8001880 <__sfp>
 8001842:	6060      	str	r0, [r4, #4]
 8001844:	4620      	mov	r0, r4
 8001846:	f000 f81b 	bl	8001880 <__sfp>
 800184a:	60a0      	str	r0, [r4, #8]
 800184c:	4620      	mov	r0, r4
 800184e:	f000 f817 	bl	8001880 <__sfp>
 8001852:	2200      	movs	r2, #0
 8001854:	60e0      	str	r0, [r4, #12]
 8001856:	2104      	movs	r1, #4
 8001858:	6860      	ldr	r0, [r4, #4]
 800185a:	f7ff ffa1 	bl	80017a0 <std>
 800185e:	2201      	movs	r2, #1
 8001860:	2109      	movs	r1, #9
 8001862:	68a0      	ldr	r0, [r4, #8]
 8001864:	f7ff ff9c 	bl	80017a0 <std>
 8001868:	2202      	movs	r2, #2
 800186a:	2112      	movs	r1, #18
 800186c:	68e0      	ldr	r0, [r4, #12]
 800186e:	f7ff ff97 	bl	80017a0 <std>
 8001872:	2301      	movs	r3, #1
 8001874:	61a3      	str	r3, [r4, #24]
 8001876:	bd10      	pop	{r4, pc}
 8001878:	08002534 	.word	0x08002534
 800187c:	080017e9 	.word	0x080017e9

08001880 <__sfp>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <__sfp+0x70>)
 8001884:	681e      	ldr	r6, [r3, #0]
 8001886:	69b3      	ldr	r3, [r6, #24]
 8001888:	4607      	mov	r7, r0
 800188a:	b913      	cbnz	r3, 8001892 <__sfp+0x12>
 800188c:	4630      	mov	r0, r6
 800188e:	f7ff ffc7 	bl	8001820 <__sinit>
 8001892:	3648      	adds	r6, #72	; 0x48
 8001894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001898:	3b01      	subs	r3, #1
 800189a:	d503      	bpl.n	80018a4 <__sfp+0x24>
 800189c:	6833      	ldr	r3, [r6, #0]
 800189e:	b133      	cbz	r3, 80018ae <__sfp+0x2e>
 80018a0:	6836      	ldr	r6, [r6, #0]
 80018a2:	e7f7      	b.n	8001894 <__sfp+0x14>
 80018a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018a8:	b16d      	cbz	r5, 80018c6 <__sfp+0x46>
 80018aa:	3468      	adds	r4, #104	; 0x68
 80018ac:	e7f4      	b.n	8001898 <__sfp+0x18>
 80018ae:	2104      	movs	r1, #4
 80018b0:	4638      	mov	r0, r7
 80018b2:	f7ff ff9f 	bl	80017f4 <__sfmoreglue>
 80018b6:	6030      	str	r0, [r6, #0]
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d1f1      	bne.n	80018a0 <__sfp+0x20>
 80018bc:	230c      	movs	r3, #12
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	4604      	mov	r4, r0
 80018c2:	4620      	mov	r0, r4
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <__sfp+0x74>)
 80018c8:	6665      	str	r5, [r4, #100]	; 0x64
 80018ca:	e9c4 5500 	strd	r5, r5, [r4]
 80018ce:	60a5      	str	r5, [r4, #8]
 80018d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80018d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80018d8:	2208      	movs	r2, #8
 80018da:	4629      	mov	r1, r5
 80018dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018e0:	f000 f84c 	bl	800197c <memset>
 80018e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018ec:	e7e9      	b.n	80018c2 <__sfp+0x42>
 80018ee:	bf00      	nop
 80018f0:	08002534 	.word	0x08002534
 80018f4:	ffff0001 	.word	0xffff0001

080018f8 <_fwalk_reent>:
 80018f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018fc:	4680      	mov	r8, r0
 80018fe:	4689      	mov	r9, r1
 8001900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001904:	2600      	movs	r6, #0
 8001906:	b914      	cbnz	r4, 800190e <_fwalk_reent+0x16>
 8001908:	4630      	mov	r0, r6
 800190a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800190e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001912:	3f01      	subs	r7, #1
 8001914:	d501      	bpl.n	800191a <_fwalk_reent+0x22>
 8001916:	6824      	ldr	r4, [r4, #0]
 8001918:	e7f5      	b.n	8001906 <_fwalk_reent+0xe>
 800191a:	89ab      	ldrh	r3, [r5, #12]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d907      	bls.n	8001930 <_fwalk_reent+0x38>
 8001920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001924:	3301      	adds	r3, #1
 8001926:	d003      	beq.n	8001930 <_fwalk_reent+0x38>
 8001928:	4629      	mov	r1, r5
 800192a:	4640      	mov	r0, r8
 800192c:	47c8      	blx	r9
 800192e:	4306      	orrs	r6, r0
 8001930:	3568      	adds	r5, #104	; 0x68
 8001932:	e7ee      	b.n	8001912 <_fwalk_reent+0x1a>

08001934 <__libc_init_array>:
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	4e0d      	ldr	r6, [pc, #52]	; (800196c <__libc_init_array+0x38>)
 8001938:	4c0d      	ldr	r4, [pc, #52]	; (8001970 <__libc_init_array+0x3c>)
 800193a:	1ba4      	subs	r4, r4, r6
 800193c:	10a4      	asrs	r4, r4, #2
 800193e:	2500      	movs	r5, #0
 8001940:	42a5      	cmp	r5, r4
 8001942:	d109      	bne.n	8001958 <__libc_init_array+0x24>
 8001944:	4e0b      	ldr	r6, [pc, #44]	; (8001974 <__libc_init_array+0x40>)
 8001946:	4c0c      	ldr	r4, [pc, #48]	; (8001978 <__libc_init_array+0x44>)
 8001948:	f000 fd8a 	bl	8002460 <_init>
 800194c:	1ba4      	subs	r4, r4, r6
 800194e:	10a4      	asrs	r4, r4, #2
 8001950:	2500      	movs	r5, #0
 8001952:	42a5      	cmp	r5, r4
 8001954:	d105      	bne.n	8001962 <__libc_init_array+0x2e>
 8001956:	bd70      	pop	{r4, r5, r6, pc}
 8001958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800195c:	4798      	blx	r3
 800195e:	3501      	adds	r5, #1
 8001960:	e7ee      	b.n	8001940 <__libc_init_array+0xc>
 8001962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001966:	4798      	blx	r3
 8001968:	3501      	adds	r5, #1
 800196a:	e7f2      	b.n	8001952 <__libc_init_array+0x1e>
 800196c:	0800256c 	.word	0x0800256c
 8001970:	0800256c 	.word	0x0800256c
 8001974:	0800256c 	.word	0x0800256c
 8001978:	08002570 	.word	0x08002570

0800197c <memset>:
 800197c:	4402      	add	r2, r0
 800197e:	4603      	mov	r3, r0
 8001980:	4293      	cmp	r3, r2
 8001982:	d100      	bne.n	8001986 <memset+0xa>
 8001984:	4770      	bx	lr
 8001986:	f803 1b01 	strb.w	r1, [r3], #1
 800198a:	e7f9      	b.n	8001980 <memset+0x4>

0800198c <_free_r>:
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4605      	mov	r5, r0
 8001990:	2900      	cmp	r1, #0
 8001992:	d045      	beq.n	8001a20 <_free_r+0x94>
 8001994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001998:	1f0c      	subs	r4, r1, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	bfb8      	it	lt
 800199e:	18e4      	addlt	r4, r4, r3
 80019a0:	f000 f93c 	bl	8001c1c <__malloc_lock>
 80019a4:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <_free_r+0x98>)
 80019a6:	6813      	ldr	r3, [r2, #0]
 80019a8:	4610      	mov	r0, r2
 80019aa:	b933      	cbnz	r3, 80019ba <_free_r+0x2e>
 80019ac:	6063      	str	r3, [r4, #4]
 80019ae:	6014      	str	r4, [r2, #0]
 80019b0:	4628      	mov	r0, r5
 80019b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019b6:	f000 b932 	b.w	8001c1e <__malloc_unlock>
 80019ba:	42a3      	cmp	r3, r4
 80019bc:	d90c      	bls.n	80019d8 <_free_r+0x4c>
 80019be:	6821      	ldr	r1, [r4, #0]
 80019c0:	1862      	adds	r2, r4, r1
 80019c2:	4293      	cmp	r3, r2
 80019c4:	bf04      	itt	eq
 80019c6:	681a      	ldreq	r2, [r3, #0]
 80019c8:	685b      	ldreq	r3, [r3, #4]
 80019ca:	6063      	str	r3, [r4, #4]
 80019cc:	bf04      	itt	eq
 80019ce:	1852      	addeq	r2, r2, r1
 80019d0:	6022      	streq	r2, [r4, #0]
 80019d2:	6004      	str	r4, [r0, #0]
 80019d4:	e7ec      	b.n	80019b0 <_free_r+0x24>
 80019d6:	4613      	mov	r3, r2
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	b10a      	cbz	r2, 80019e0 <_free_r+0x54>
 80019dc:	42a2      	cmp	r2, r4
 80019de:	d9fa      	bls.n	80019d6 <_free_r+0x4a>
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	1858      	adds	r0, r3, r1
 80019e4:	42a0      	cmp	r0, r4
 80019e6:	d10b      	bne.n	8001a00 <_free_r+0x74>
 80019e8:	6820      	ldr	r0, [r4, #0]
 80019ea:	4401      	add	r1, r0
 80019ec:	1858      	adds	r0, r3, r1
 80019ee:	4282      	cmp	r2, r0
 80019f0:	6019      	str	r1, [r3, #0]
 80019f2:	d1dd      	bne.n	80019b0 <_free_r+0x24>
 80019f4:	6810      	ldr	r0, [r2, #0]
 80019f6:	6852      	ldr	r2, [r2, #4]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	4401      	add	r1, r0
 80019fc:	6019      	str	r1, [r3, #0]
 80019fe:	e7d7      	b.n	80019b0 <_free_r+0x24>
 8001a00:	d902      	bls.n	8001a08 <_free_r+0x7c>
 8001a02:	230c      	movs	r3, #12
 8001a04:	602b      	str	r3, [r5, #0]
 8001a06:	e7d3      	b.n	80019b0 <_free_r+0x24>
 8001a08:	6820      	ldr	r0, [r4, #0]
 8001a0a:	1821      	adds	r1, r4, r0
 8001a0c:	428a      	cmp	r2, r1
 8001a0e:	bf04      	itt	eq
 8001a10:	6811      	ldreq	r1, [r2, #0]
 8001a12:	6852      	ldreq	r2, [r2, #4]
 8001a14:	6062      	str	r2, [r4, #4]
 8001a16:	bf04      	itt	eq
 8001a18:	1809      	addeq	r1, r1, r0
 8001a1a:	6021      	streq	r1, [r4, #0]
 8001a1c:	605c      	str	r4, [r3, #4]
 8001a1e:	e7c7      	b.n	80019b0 <_free_r+0x24>
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	bf00      	nop
 8001a24:	2000010c 	.word	0x2000010c

08001a28 <_malloc_r>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	1ccd      	adds	r5, r1, #3
 8001a2c:	f025 0503 	bic.w	r5, r5, #3
 8001a30:	3508      	adds	r5, #8
 8001a32:	2d0c      	cmp	r5, #12
 8001a34:	bf38      	it	cc
 8001a36:	250c      	movcc	r5, #12
 8001a38:	2d00      	cmp	r5, #0
 8001a3a:	4606      	mov	r6, r0
 8001a3c:	db01      	blt.n	8001a42 <_malloc_r+0x1a>
 8001a3e:	42a9      	cmp	r1, r5
 8001a40:	d903      	bls.n	8001a4a <_malloc_r+0x22>
 8001a42:	230c      	movs	r3, #12
 8001a44:	6033      	str	r3, [r6, #0]
 8001a46:	2000      	movs	r0, #0
 8001a48:	bd70      	pop	{r4, r5, r6, pc}
 8001a4a:	f000 f8e7 	bl	8001c1c <__malloc_lock>
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <_malloc_r+0xac>)
 8001a50:	6814      	ldr	r4, [r2, #0]
 8001a52:	4621      	mov	r1, r4
 8001a54:	b991      	cbnz	r1, 8001a7c <_malloc_r+0x54>
 8001a56:	4c20      	ldr	r4, [pc, #128]	; (8001ad8 <_malloc_r+0xb0>)
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	b91b      	cbnz	r3, 8001a64 <_malloc_r+0x3c>
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	f000 f855 	bl	8001b0c <_sbrk_r>
 8001a62:	6020      	str	r0, [r4, #0]
 8001a64:	4629      	mov	r1, r5
 8001a66:	4630      	mov	r0, r6
 8001a68:	f000 f850 	bl	8001b0c <_sbrk_r>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d124      	bne.n	8001aba <_malloc_r+0x92>
 8001a70:	230c      	movs	r3, #12
 8001a72:	6033      	str	r3, [r6, #0]
 8001a74:	4630      	mov	r0, r6
 8001a76:	f000 f8d2 	bl	8001c1e <__malloc_unlock>
 8001a7a:	e7e4      	b.n	8001a46 <_malloc_r+0x1e>
 8001a7c:	680b      	ldr	r3, [r1, #0]
 8001a7e:	1b5b      	subs	r3, r3, r5
 8001a80:	d418      	bmi.n	8001ab4 <_malloc_r+0x8c>
 8001a82:	2b0b      	cmp	r3, #11
 8001a84:	d90f      	bls.n	8001aa6 <_malloc_r+0x7e>
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	50cd      	str	r5, [r1, r3]
 8001a8a:	18cc      	adds	r4, r1, r3
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f000 f8c6 	bl	8001c1e <__malloc_unlock>
 8001a92:	f104 000b 	add.w	r0, r4, #11
 8001a96:	1d23      	adds	r3, r4, #4
 8001a98:	f020 0007 	bic.w	r0, r0, #7
 8001a9c:	1ac3      	subs	r3, r0, r3
 8001a9e:	d0d3      	beq.n	8001a48 <_malloc_r+0x20>
 8001aa0:	425a      	negs	r2, r3
 8001aa2:	50e2      	str	r2, [r4, r3]
 8001aa4:	e7d0      	b.n	8001a48 <_malloc_r+0x20>
 8001aa6:	428c      	cmp	r4, r1
 8001aa8:	684b      	ldr	r3, [r1, #4]
 8001aaa:	bf16      	itet	ne
 8001aac:	6063      	strne	r3, [r4, #4]
 8001aae:	6013      	streq	r3, [r2, #0]
 8001ab0:	460c      	movne	r4, r1
 8001ab2:	e7eb      	b.n	8001a8c <_malloc_r+0x64>
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	6849      	ldr	r1, [r1, #4]
 8001ab8:	e7cc      	b.n	8001a54 <_malloc_r+0x2c>
 8001aba:	1cc4      	adds	r4, r0, #3
 8001abc:	f024 0403 	bic.w	r4, r4, #3
 8001ac0:	42a0      	cmp	r0, r4
 8001ac2:	d005      	beq.n	8001ad0 <_malloc_r+0xa8>
 8001ac4:	1a21      	subs	r1, r4, r0
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f000 f820 	bl	8001b0c <_sbrk_r>
 8001acc:	3001      	adds	r0, #1
 8001ace:	d0cf      	beq.n	8001a70 <_malloc_r+0x48>
 8001ad0:	6025      	str	r5, [r4, #0]
 8001ad2:	e7db      	b.n	8001a8c <_malloc_r+0x64>
 8001ad4:	2000010c 	.word	0x2000010c
 8001ad8:	20000110 	.word	0x20000110

08001adc <iprintf>:
 8001adc:	b40f      	push	{r0, r1, r2, r3}
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <iprintf+0x2c>)
 8001ae0:	b513      	push	{r0, r1, r4, lr}
 8001ae2:	681c      	ldr	r4, [r3, #0]
 8001ae4:	b124      	cbz	r4, 8001af0 <iprintf+0x14>
 8001ae6:	69a3      	ldr	r3, [r4, #24]
 8001ae8:	b913      	cbnz	r3, 8001af0 <iprintf+0x14>
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fe98 	bl	8001820 <__sinit>
 8001af0:	ab05      	add	r3, sp, #20
 8001af2:	9a04      	ldr	r2, [sp, #16]
 8001af4:	68a1      	ldr	r1, [r4, #8]
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	4620      	mov	r0, r4
 8001afa:	f000 f8bb 	bl	8001c74 <_vfiprintf_r>
 8001afe:	b002      	add	sp, #8
 8001b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b04:	b004      	add	sp, #16
 8001b06:	4770      	bx	lr
 8001b08:	20000058 	.word	0x20000058

08001b0c <_sbrk_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4c06      	ldr	r4, [pc, #24]	; (8001b28 <_sbrk_r+0x1c>)
 8001b10:	2300      	movs	r3, #0
 8001b12:	4605      	mov	r5, r0
 8001b14:	4608      	mov	r0, r1
 8001b16:	6023      	str	r3, [r4, #0]
 8001b18:	f7fe fe98 	bl	800084c <_sbrk>
 8001b1c:	1c43      	adds	r3, r0, #1
 8001b1e:	d102      	bne.n	8001b26 <_sbrk_r+0x1a>
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	b103      	cbz	r3, 8001b26 <_sbrk_r+0x1a>
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	20000118 	.word	0x20000118

08001b2c <__sread>:
 8001b2c:	b510      	push	{r4, lr}
 8001b2e:	460c      	mov	r4, r1
 8001b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b34:	f000 fb3c 	bl	80021b0 <_read_r>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	bfab      	itete	ge
 8001b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8001b40:	181b      	addge	r3, r3, r0
 8001b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b46:	bfac      	ite	ge
 8001b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b4a:	81a3      	strhlt	r3, [r4, #12]
 8001b4c:	bd10      	pop	{r4, pc}

08001b4e <__swrite>:
 8001b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b52:	461f      	mov	r7, r3
 8001b54:	898b      	ldrh	r3, [r1, #12]
 8001b56:	05db      	lsls	r3, r3, #23
 8001b58:	4605      	mov	r5, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	4616      	mov	r6, r2
 8001b5e:	d505      	bpl.n	8001b6c <__swrite+0x1e>
 8001b60:	2302      	movs	r3, #2
 8001b62:	2200      	movs	r2, #0
 8001b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b68:	f000 f846 	bl	8001bf8 <_lseek_r>
 8001b6c:	89a3      	ldrh	r3, [r4, #12]
 8001b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b76:	81a3      	strh	r3, [r4, #12]
 8001b78:	4632      	mov	r2, r6
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b82:	f000 b817 	b.w	8001bb4 <_write_r>

08001b86 <__sseek>:
 8001b86:	b510      	push	{r4, lr}
 8001b88:	460c      	mov	r4, r1
 8001b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b8e:	f000 f833 	bl	8001bf8 <_lseek_r>
 8001b92:	1c43      	adds	r3, r0, #1
 8001b94:	89a3      	ldrh	r3, [r4, #12]
 8001b96:	bf15      	itete	ne
 8001b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ba2:	81a3      	strheq	r3, [r4, #12]
 8001ba4:	bf18      	it	ne
 8001ba6:	81a3      	strhne	r3, [r4, #12]
 8001ba8:	bd10      	pop	{r4, pc}

08001baa <__sclose>:
 8001baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bae:	f000 b813 	b.w	8001bd8 <_close_r>
	...

08001bb4 <_write_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4c07      	ldr	r4, [pc, #28]	; (8001bd4 <_write_r+0x20>)
 8001bb8:	4605      	mov	r5, r0
 8001bba:	4608      	mov	r0, r1
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	6022      	str	r2, [r4, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7fe fdf1 	bl	80007aa <_write>
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d102      	bne.n	8001bd2 <_write_r+0x1e>
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	b103      	cbz	r3, 8001bd2 <_write_r+0x1e>
 8001bd0:	602b      	str	r3, [r5, #0]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	20000118 	.word	0x20000118

08001bd8 <_close_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4c06      	ldr	r4, [pc, #24]	; (8001bf4 <_close_r+0x1c>)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4605      	mov	r5, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	6023      	str	r3, [r4, #0]
 8001be4:	f7fe fdfd 	bl	80007e2 <_close>
 8001be8:	1c43      	adds	r3, r0, #1
 8001bea:	d102      	bne.n	8001bf2 <_close_r+0x1a>
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	b103      	cbz	r3, 8001bf2 <_close_r+0x1a>
 8001bf0:	602b      	str	r3, [r5, #0]
 8001bf2:	bd38      	pop	{r3, r4, r5, pc}
 8001bf4:	20000118 	.word	0x20000118

08001bf8 <_lseek_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4c07      	ldr	r4, [pc, #28]	; (8001c18 <_lseek_r+0x20>)
 8001bfc:	4605      	mov	r5, r0
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	2200      	movs	r2, #0
 8001c04:	6022      	str	r2, [r4, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f7fe fe12 	bl	8000830 <_lseek>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_lseek_r+0x1e>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_lseek_r+0x1e>
 8001c14:	602b      	str	r3, [r5, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	20000118 	.word	0x20000118

08001c1c <__malloc_lock>:
 8001c1c:	4770      	bx	lr

08001c1e <__malloc_unlock>:
 8001c1e:	4770      	bx	lr

08001c20 <__sfputc_r>:
 8001c20:	6893      	ldr	r3, [r2, #8]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	b410      	push	{r4}
 8001c28:	6093      	str	r3, [r2, #8]
 8001c2a:	da08      	bge.n	8001c3e <__sfputc_r+0x1e>
 8001c2c:	6994      	ldr	r4, [r2, #24]
 8001c2e:	42a3      	cmp	r3, r4
 8001c30:	db01      	blt.n	8001c36 <__sfputc_r+0x16>
 8001c32:	290a      	cmp	r1, #10
 8001c34:	d103      	bne.n	8001c3e <__sfputc_r+0x1e>
 8001c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c3a:	f000 bacb 	b.w	80021d4 <__swbuf_r>
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	1c58      	adds	r0, r3, #1
 8001c42:	6010      	str	r0, [r2, #0]
 8001c44:	7019      	strb	r1, [r3, #0]
 8001c46:	4608      	mov	r0, r1
 8001c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <__sfputs_r>:
 8001c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c50:	4606      	mov	r6, r0
 8001c52:	460f      	mov	r7, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	18d5      	adds	r5, r2, r3
 8001c58:	42ac      	cmp	r4, r5
 8001c5a:	d101      	bne.n	8001c60 <__sfputs_r+0x12>
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e007      	b.n	8001c70 <__sfputs_r+0x22>
 8001c60:	463a      	mov	r2, r7
 8001c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c66:	4630      	mov	r0, r6
 8001c68:	f7ff ffda 	bl	8001c20 <__sfputc_r>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d1f3      	bne.n	8001c58 <__sfputs_r+0xa>
 8001c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c74 <_vfiprintf_r>:
 8001c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c78:	460c      	mov	r4, r1
 8001c7a:	b09d      	sub	sp, #116	; 0x74
 8001c7c:	4617      	mov	r7, r2
 8001c7e:	461d      	mov	r5, r3
 8001c80:	4606      	mov	r6, r0
 8001c82:	b118      	cbz	r0, 8001c8c <_vfiprintf_r+0x18>
 8001c84:	6983      	ldr	r3, [r0, #24]
 8001c86:	b90b      	cbnz	r3, 8001c8c <_vfiprintf_r+0x18>
 8001c88:	f7ff fdca 	bl	8001820 <__sinit>
 8001c8c:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <_vfiprintf_r+0x20c>)
 8001c8e:	429c      	cmp	r4, r3
 8001c90:	d158      	bne.n	8001d44 <_vfiprintf_r+0xd0>
 8001c92:	6874      	ldr	r4, [r6, #4]
 8001c94:	89a3      	ldrh	r3, [r4, #12]
 8001c96:	0718      	lsls	r0, r3, #28
 8001c98:	d55e      	bpl.n	8001d58 <_vfiprintf_r+0xe4>
 8001c9a:	6923      	ldr	r3, [r4, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d05b      	beq.n	8001d58 <_vfiprintf_r+0xe4>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001caa:	2330      	movs	r3, #48	; 0x30
 8001cac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cb0:	9503      	str	r5, [sp, #12]
 8001cb2:	f04f 0b01 	mov.w	fp, #1
 8001cb6:	46b8      	mov	r8, r7
 8001cb8:	4645      	mov	r5, r8
 8001cba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cbe:	b10b      	cbz	r3, 8001cc4 <_vfiprintf_r+0x50>
 8001cc0:	2b25      	cmp	r3, #37	; 0x25
 8001cc2:	d154      	bne.n	8001d6e <_vfiprintf_r+0xfa>
 8001cc4:	ebb8 0a07 	subs.w	sl, r8, r7
 8001cc8:	d00b      	beq.n	8001ce2 <_vfiprintf_r+0x6e>
 8001cca:	4653      	mov	r3, sl
 8001ccc:	463a      	mov	r2, r7
 8001cce:	4621      	mov	r1, r4
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f7ff ffbc 	bl	8001c4e <__sfputs_r>
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	f000 80c2 	beq.w	8001e60 <_vfiprintf_r+0x1ec>
 8001cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cde:	4453      	add	r3, sl
 8001ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce2:	f898 3000 	ldrb.w	r3, [r8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80ba 	beq.w	8001e60 <_vfiprintf_r+0x1ec>
 8001cec:	2300      	movs	r3, #0
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cf6:	9304      	str	r3, [sp, #16]
 8001cf8:	9307      	str	r3, [sp, #28]
 8001cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8001d00:	46a8      	mov	r8, r5
 8001d02:	2205      	movs	r2, #5
 8001d04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d08:	485e      	ldr	r0, [pc, #376]	; (8001e84 <_vfiprintf_r+0x210>)
 8001d0a:	f7fe fa71 	bl	80001f0 <memchr>
 8001d0e:	9b04      	ldr	r3, [sp, #16]
 8001d10:	bb78      	cbnz	r0, 8001d72 <_vfiprintf_r+0xfe>
 8001d12:	06d9      	lsls	r1, r3, #27
 8001d14:	bf44      	itt	mi
 8001d16:	2220      	movmi	r2, #32
 8001d18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d1c:	071a      	lsls	r2, r3, #28
 8001d1e:	bf44      	itt	mi
 8001d20:	222b      	movmi	r2, #43	; 0x2b
 8001d22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d26:	782a      	ldrb	r2, [r5, #0]
 8001d28:	2a2a      	cmp	r2, #42	; 0x2a
 8001d2a:	d02a      	beq.n	8001d82 <_vfiprintf_r+0x10e>
 8001d2c:	9a07      	ldr	r2, [sp, #28]
 8001d2e:	46a8      	mov	r8, r5
 8001d30:	2000      	movs	r0, #0
 8001d32:	250a      	movs	r5, #10
 8001d34:	4641      	mov	r1, r8
 8001d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d3a:	3b30      	subs	r3, #48	; 0x30
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d969      	bls.n	8001e14 <_vfiprintf_r+0x1a0>
 8001d40:	b360      	cbz	r0, 8001d9c <_vfiprintf_r+0x128>
 8001d42:	e024      	b.n	8001d8e <_vfiprintf_r+0x11a>
 8001d44:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <_vfiprintf_r+0x214>)
 8001d46:	429c      	cmp	r4, r3
 8001d48:	d101      	bne.n	8001d4e <_vfiprintf_r+0xda>
 8001d4a:	68b4      	ldr	r4, [r6, #8]
 8001d4c:	e7a2      	b.n	8001c94 <_vfiprintf_r+0x20>
 8001d4e:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <_vfiprintf_r+0x218>)
 8001d50:	429c      	cmp	r4, r3
 8001d52:	bf08      	it	eq
 8001d54:	68f4      	ldreq	r4, [r6, #12]
 8001d56:	e79d      	b.n	8001c94 <_vfiprintf_r+0x20>
 8001d58:	4621      	mov	r1, r4
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f000 fa8c 	bl	8002278 <__swsetup_r>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d09d      	beq.n	8001ca0 <_vfiprintf_r+0x2c>
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	b01d      	add	sp, #116	; 0x74
 8001d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d6e:	46a8      	mov	r8, r5
 8001d70:	e7a2      	b.n	8001cb8 <_vfiprintf_r+0x44>
 8001d72:	4a44      	ldr	r2, [pc, #272]	; (8001e84 <_vfiprintf_r+0x210>)
 8001d74:	1a80      	subs	r0, r0, r2
 8001d76:	fa0b f000 	lsl.w	r0, fp, r0
 8001d7a:	4318      	orrs	r0, r3
 8001d7c:	9004      	str	r0, [sp, #16]
 8001d7e:	4645      	mov	r5, r8
 8001d80:	e7be      	b.n	8001d00 <_vfiprintf_r+0x8c>
 8001d82:	9a03      	ldr	r2, [sp, #12]
 8001d84:	1d11      	adds	r1, r2, #4
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	9103      	str	r1, [sp, #12]
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	db01      	blt.n	8001d92 <_vfiprintf_r+0x11e>
 8001d8e:	9207      	str	r2, [sp, #28]
 8001d90:	e004      	b.n	8001d9c <_vfiprintf_r+0x128>
 8001d92:	4252      	negs	r2, r2
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	9207      	str	r2, [sp, #28]
 8001d9a:	9304      	str	r3, [sp, #16]
 8001d9c:	f898 3000 	ldrb.w	r3, [r8]
 8001da0:	2b2e      	cmp	r3, #46	; 0x2e
 8001da2:	d10e      	bne.n	8001dc2 <_vfiprintf_r+0x14e>
 8001da4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001da8:	2b2a      	cmp	r3, #42	; 0x2a
 8001daa:	d138      	bne.n	8001e1e <_vfiprintf_r+0x1aa>
 8001dac:	9b03      	ldr	r3, [sp, #12]
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	9203      	str	r2, [sp, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bfb8      	it	lt
 8001db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dbc:	f108 0802 	add.w	r8, r8, #2
 8001dc0:	9305      	str	r3, [sp, #20]
 8001dc2:	4d33      	ldr	r5, [pc, #204]	; (8001e90 <_vfiprintf_r+0x21c>)
 8001dc4:	f898 1000 	ldrb.w	r1, [r8]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7fe fa10 	bl	80001f0 <memchr>
 8001dd0:	b140      	cbz	r0, 8001de4 <_vfiprintf_r+0x170>
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	1b40      	subs	r0, r0, r5
 8001dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8001dda:	9b04      	ldr	r3, [sp, #16]
 8001ddc:	4303      	orrs	r3, r0
 8001dde:	f108 0801 	add.w	r8, r8, #1
 8001de2:	9304      	str	r3, [sp, #16]
 8001de4:	f898 1000 	ldrb.w	r1, [r8]
 8001de8:	482a      	ldr	r0, [pc, #168]	; (8001e94 <_vfiprintf_r+0x220>)
 8001dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dee:	2206      	movs	r2, #6
 8001df0:	f108 0701 	add.w	r7, r8, #1
 8001df4:	f7fe f9fc 	bl	80001f0 <memchr>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d037      	beq.n	8001e6c <_vfiprintf_r+0x1f8>
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <_vfiprintf_r+0x224>)
 8001dfe:	bb1b      	cbnz	r3, 8001e48 <_vfiprintf_r+0x1d4>
 8001e00:	9b03      	ldr	r3, [sp, #12]
 8001e02:	3307      	adds	r3, #7
 8001e04:	f023 0307 	bic.w	r3, r3, #7
 8001e08:	3308      	adds	r3, #8
 8001e0a:	9303      	str	r3, [sp, #12]
 8001e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e0e:	444b      	add	r3, r9
 8001e10:	9309      	str	r3, [sp, #36]	; 0x24
 8001e12:	e750      	b.n	8001cb6 <_vfiprintf_r+0x42>
 8001e14:	fb05 3202 	mla	r2, r5, r2, r3
 8001e18:	2001      	movs	r0, #1
 8001e1a:	4688      	mov	r8, r1
 8001e1c:	e78a      	b.n	8001d34 <_vfiprintf_r+0xc0>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f108 0801 	add.w	r8, r8, #1
 8001e24:	9305      	str	r3, [sp, #20]
 8001e26:	4619      	mov	r1, r3
 8001e28:	250a      	movs	r5, #10
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e30:	3a30      	subs	r2, #48	; 0x30
 8001e32:	2a09      	cmp	r2, #9
 8001e34:	d903      	bls.n	8001e3e <_vfiprintf_r+0x1ca>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0c3      	beq.n	8001dc2 <_vfiprintf_r+0x14e>
 8001e3a:	9105      	str	r1, [sp, #20]
 8001e3c:	e7c1      	b.n	8001dc2 <_vfiprintf_r+0x14e>
 8001e3e:	fb05 2101 	mla	r1, r5, r1, r2
 8001e42:	2301      	movs	r3, #1
 8001e44:	4680      	mov	r8, r0
 8001e46:	e7f0      	b.n	8001e2a <_vfiprintf_r+0x1b6>
 8001e48:	ab03      	add	r3, sp, #12
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_vfiprintf_r+0x228>)
 8001e50:	a904      	add	r1, sp, #16
 8001e52:	4630      	mov	r0, r6
 8001e54:	f3af 8000 	nop.w
 8001e58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e5c:	4681      	mov	r9, r0
 8001e5e:	d1d5      	bne.n	8001e0c <_vfiprintf_r+0x198>
 8001e60:	89a3      	ldrh	r3, [r4, #12]
 8001e62:	065b      	lsls	r3, r3, #25
 8001e64:	f53f af7e 	bmi.w	8001d64 <_vfiprintf_r+0xf0>
 8001e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e6a:	e77d      	b.n	8001d68 <_vfiprintf_r+0xf4>
 8001e6c:	ab03      	add	r3, sp, #12
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4622      	mov	r2, r4
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <_vfiprintf_r+0x228>)
 8001e74:	a904      	add	r1, sp, #16
 8001e76:	4630      	mov	r0, r6
 8001e78:	f000 f888 	bl	8001f8c <_printf_i>
 8001e7c:	e7ec      	b.n	8001e58 <_vfiprintf_r+0x1e4>
 8001e7e:	bf00      	nop
 8001e80:	080024f4 	.word	0x080024f4
 8001e84:	08002538 	.word	0x08002538
 8001e88:	08002514 	.word	0x08002514
 8001e8c:	080024d4 	.word	0x080024d4
 8001e90:	0800253e 	.word	0x0800253e
 8001e94:	08002542 	.word	0x08002542
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	08001c4f 	.word	0x08001c4f

08001ea0 <_printf_common>:
 8001ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea4:	4691      	mov	r9, r2
 8001ea6:	461f      	mov	r7, r3
 8001ea8:	688a      	ldr	r2, [r1, #8]
 8001eaa:	690b      	ldr	r3, [r1, #16]
 8001eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bfb8      	it	lt
 8001eb4:	4613      	movlt	r3, r2
 8001eb6:	f8c9 3000 	str.w	r3, [r9]
 8001eba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ebe:	4606      	mov	r6, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	b112      	cbz	r2, 8001eca <_printf_common+0x2a>
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f8c9 3000 	str.w	r3, [r9]
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	0699      	lsls	r1, r3, #26
 8001ece:	bf42      	ittt	mi
 8001ed0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ed4:	3302      	addmi	r3, #2
 8001ed6:	f8c9 3000 	strmi.w	r3, [r9]
 8001eda:	6825      	ldr	r5, [r4, #0]
 8001edc:	f015 0506 	ands.w	r5, r5, #6
 8001ee0:	d107      	bne.n	8001ef2 <_printf_common+0x52>
 8001ee2:	f104 0a19 	add.w	sl, r4, #25
 8001ee6:	68e3      	ldr	r3, [r4, #12]
 8001ee8:	f8d9 2000 	ldr.w	r2, [r9]
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	42ab      	cmp	r3, r5
 8001ef0:	dc28      	bgt.n	8001f44 <_printf_common+0xa4>
 8001ef2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	3300      	adds	r3, #0
 8001efa:	bf18      	it	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	0692      	lsls	r2, r2, #26
 8001f00:	d42d      	bmi.n	8001f5e <_printf_common+0xbe>
 8001f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f06:	4639      	mov	r1, r7
 8001f08:	4630      	mov	r0, r6
 8001f0a:	47c0      	blx	r8
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d020      	beq.n	8001f52 <_printf_common+0xb2>
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	68e5      	ldr	r5, [r4, #12]
 8001f14:	f8d9 2000 	ldr.w	r2, [r9]
 8001f18:	f003 0306 	and.w	r3, r3, #6
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	bf08      	it	eq
 8001f20:	1aad      	subeq	r5, r5, r2
 8001f22:	68a3      	ldr	r3, [r4, #8]
 8001f24:	6922      	ldr	r2, [r4, #16]
 8001f26:	bf0c      	ite	eq
 8001f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f2c:	2500      	movne	r5, #0
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	bfc4      	itt	gt
 8001f32:	1a9b      	subgt	r3, r3, r2
 8001f34:	18ed      	addgt	r5, r5, r3
 8001f36:	f04f 0900 	mov.w	r9, #0
 8001f3a:	341a      	adds	r4, #26
 8001f3c:	454d      	cmp	r5, r9
 8001f3e:	d11a      	bne.n	8001f76 <_printf_common+0xd6>
 8001f40:	2000      	movs	r0, #0
 8001f42:	e008      	b.n	8001f56 <_printf_common+0xb6>
 8001f44:	2301      	movs	r3, #1
 8001f46:	4652      	mov	r2, sl
 8001f48:	4639      	mov	r1, r7
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	47c0      	blx	r8
 8001f4e:	3001      	adds	r0, #1
 8001f50:	d103      	bne.n	8001f5a <_printf_common+0xba>
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295
 8001f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5a:	3501      	adds	r5, #1
 8001f5c:	e7c3      	b.n	8001ee6 <_printf_common+0x46>
 8001f5e:	18e1      	adds	r1, r4, r3
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	2030      	movs	r0, #48	; 0x30
 8001f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f68:	4422      	add	r2, r4
 8001f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f72:	3302      	adds	r3, #2
 8001f74:	e7c5      	b.n	8001f02 <_printf_common+0x62>
 8001f76:	2301      	movs	r3, #1
 8001f78:	4622      	mov	r2, r4
 8001f7a:	4639      	mov	r1, r7
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	47c0      	blx	r8
 8001f80:	3001      	adds	r0, #1
 8001f82:	d0e6      	beq.n	8001f52 <_printf_common+0xb2>
 8001f84:	f109 0901 	add.w	r9, r9, #1
 8001f88:	e7d8      	b.n	8001f3c <_printf_common+0x9c>
	...

08001f8c <_printf_i>:
 8001f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f94:	460c      	mov	r4, r1
 8001f96:	7e09      	ldrb	r1, [r1, #24]
 8001f98:	b085      	sub	sp, #20
 8001f9a:	296e      	cmp	r1, #110	; 0x6e
 8001f9c:	4617      	mov	r7, r2
 8001f9e:	4606      	mov	r6, r0
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001fa4:	f000 80b3 	beq.w	800210e <_printf_i+0x182>
 8001fa8:	d822      	bhi.n	8001ff0 <_printf_i+0x64>
 8001faa:	2963      	cmp	r1, #99	; 0x63
 8001fac:	d036      	beq.n	800201c <_printf_i+0x90>
 8001fae:	d80a      	bhi.n	8001fc6 <_printf_i+0x3a>
 8001fb0:	2900      	cmp	r1, #0
 8001fb2:	f000 80b9 	beq.w	8002128 <_printf_i+0x19c>
 8001fb6:	2958      	cmp	r1, #88	; 0x58
 8001fb8:	f000 8083 	beq.w	80020c2 <_printf_i+0x136>
 8001fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001fc4:	e032      	b.n	800202c <_printf_i+0xa0>
 8001fc6:	2964      	cmp	r1, #100	; 0x64
 8001fc8:	d001      	beq.n	8001fce <_printf_i+0x42>
 8001fca:	2969      	cmp	r1, #105	; 0x69
 8001fcc:	d1f6      	bne.n	8001fbc <_printf_i+0x30>
 8001fce:	6820      	ldr	r0, [r4, #0]
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	0605      	lsls	r5, r0, #24
 8001fd4:	f103 0104 	add.w	r1, r3, #4
 8001fd8:	d52a      	bpl.n	8002030 <_printf_i+0xa4>
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da03      	bge.n	8001fea <_printf_i+0x5e>
 8001fe2:	222d      	movs	r2, #45	; 0x2d
 8001fe4:	425b      	negs	r3, r3
 8001fe6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fea:	486f      	ldr	r0, [pc, #444]	; (80021a8 <_printf_i+0x21c>)
 8001fec:	220a      	movs	r2, #10
 8001fee:	e039      	b.n	8002064 <_printf_i+0xd8>
 8001ff0:	2973      	cmp	r1, #115	; 0x73
 8001ff2:	f000 809d 	beq.w	8002130 <_printf_i+0x1a4>
 8001ff6:	d808      	bhi.n	800200a <_printf_i+0x7e>
 8001ff8:	296f      	cmp	r1, #111	; 0x6f
 8001ffa:	d020      	beq.n	800203e <_printf_i+0xb2>
 8001ffc:	2970      	cmp	r1, #112	; 0x70
 8001ffe:	d1dd      	bne.n	8001fbc <_printf_i+0x30>
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	f043 0320 	orr.w	r3, r3, #32
 8002006:	6023      	str	r3, [r4, #0]
 8002008:	e003      	b.n	8002012 <_printf_i+0x86>
 800200a:	2975      	cmp	r1, #117	; 0x75
 800200c:	d017      	beq.n	800203e <_printf_i+0xb2>
 800200e:	2978      	cmp	r1, #120	; 0x78
 8002010:	d1d4      	bne.n	8001fbc <_printf_i+0x30>
 8002012:	2378      	movs	r3, #120	; 0x78
 8002014:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002018:	4864      	ldr	r0, [pc, #400]	; (80021ac <_printf_i+0x220>)
 800201a:	e055      	b.n	80020c8 <_printf_i+0x13c>
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	1d19      	adds	r1, r3, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6011      	str	r1, [r2, #0]
 8002024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800202c:	2301      	movs	r3, #1
 800202e:	e08c      	b.n	800214a <_printf_i+0x1be>
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6011      	str	r1, [r2, #0]
 8002034:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002038:	bf18      	it	ne
 800203a:	b21b      	sxthne	r3, r3
 800203c:	e7cf      	b.n	8001fde <_printf_i+0x52>
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	6825      	ldr	r5, [r4, #0]
 8002042:	1d18      	adds	r0, r3, #4
 8002044:	6010      	str	r0, [r2, #0]
 8002046:	0628      	lsls	r0, r5, #24
 8002048:	d501      	bpl.n	800204e <_printf_i+0xc2>
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e002      	b.n	8002054 <_printf_i+0xc8>
 800204e:	0668      	lsls	r0, r5, #25
 8002050:	d5fb      	bpl.n	800204a <_printf_i+0xbe>
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	4854      	ldr	r0, [pc, #336]	; (80021a8 <_printf_i+0x21c>)
 8002056:	296f      	cmp	r1, #111	; 0x6f
 8002058:	bf14      	ite	ne
 800205a:	220a      	movne	r2, #10
 800205c:	2208      	moveq	r2, #8
 800205e:	2100      	movs	r1, #0
 8002060:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002064:	6865      	ldr	r5, [r4, #4]
 8002066:	60a5      	str	r5, [r4, #8]
 8002068:	2d00      	cmp	r5, #0
 800206a:	f2c0 8095 	blt.w	8002198 <_printf_i+0x20c>
 800206e:	6821      	ldr	r1, [r4, #0]
 8002070:	f021 0104 	bic.w	r1, r1, #4
 8002074:	6021      	str	r1, [r4, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d13d      	bne.n	80020f6 <_printf_i+0x16a>
 800207a:	2d00      	cmp	r5, #0
 800207c:	f040 808e 	bne.w	800219c <_printf_i+0x210>
 8002080:	4665      	mov	r5, ip
 8002082:	2a08      	cmp	r2, #8
 8002084:	d10b      	bne.n	800209e <_printf_i+0x112>
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	07db      	lsls	r3, r3, #31
 800208a:	d508      	bpl.n	800209e <_printf_i+0x112>
 800208c:	6923      	ldr	r3, [r4, #16]
 800208e:	6862      	ldr	r2, [r4, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	bfde      	ittt	le
 8002094:	2330      	movle	r3, #48	; 0x30
 8002096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800209a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800209e:	ebac 0305 	sub.w	r3, ip, r5
 80020a2:	6123      	str	r3, [r4, #16]
 80020a4:	f8cd 8000 	str.w	r8, [sp]
 80020a8:	463b      	mov	r3, r7
 80020aa:	aa03      	add	r2, sp, #12
 80020ac:	4621      	mov	r1, r4
 80020ae:	4630      	mov	r0, r6
 80020b0:	f7ff fef6 	bl	8001ea0 <_printf_common>
 80020b4:	3001      	adds	r0, #1
 80020b6:	d14d      	bne.n	8002154 <_printf_i+0x1c8>
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	b005      	add	sp, #20
 80020be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020c2:	4839      	ldr	r0, [pc, #228]	; (80021a8 <_printf_i+0x21c>)
 80020c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80020c8:	6813      	ldr	r3, [r2, #0]
 80020ca:	6821      	ldr	r1, [r4, #0]
 80020cc:	1d1d      	adds	r5, r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6015      	str	r5, [r2, #0]
 80020d2:	060a      	lsls	r2, r1, #24
 80020d4:	d50b      	bpl.n	80020ee <_printf_i+0x162>
 80020d6:	07ca      	lsls	r2, r1, #31
 80020d8:	bf44      	itt	mi
 80020da:	f041 0120 	orrmi.w	r1, r1, #32
 80020de:	6021      	strmi	r1, [r4, #0]
 80020e0:	b91b      	cbnz	r3, 80020ea <_printf_i+0x15e>
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	f022 0220 	bic.w	r2, r2, #32
 80020e8:	6022      	str	r2, [r4, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	e7b7      	b.n	800205e <_printf_i+0xd2>
 80020ee:	064d      	lsls	r5, r1, #25
 80020f0:	bf48      	it	mi
 80020f2:	b29b      	uxthmi	r3, r3
 80020f4:	e7ef      	b.n	80020d6 <_printf_i+0x14a>
 80020f6:	4665      	mov	r5, ip
 80020f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020fc:	fb02 3311 	mls	r3, r2, r1, r3
 8002100:	5cc3      	ldrb	r3, [r0, r3]
 8002102:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002106:	460b      	mov	r3, r1
 8002108:	2900      	cmp	r1, #0
 800210a:	d1f5      	bne.n	80020f8 <_printf_i+0x16c>
 800210c:	e7b9      	b.n	8002082 <_printf_i+0xf6>
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	6825      	ldr	r5, [r4, #0]
 8002112:	6961      	ldr	r1, [r4, #20]
 8002114:	1d18      	adds	r0, r3, #4
 8002116:	6010      	str	r0, [r2, #0]
 8002118:	0628      	lsls	r0, r5, #24
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	d501      	bpl.n	8002122 <_printf_i+0x196>
 800211e:	6019      	str	r1, [r3, #0]
 8002120:	e002      	b.n	8002128 <_printf_i+0x19c>
 8002122:	066a      	lsls	r2, r5, #25
 8002124:	d5fb      	bpl.n	800211e <_printf_i+0x192>
 8002126:	8019      	strh	r1, [r3, #0]
 8002128:	2300      	movs	r3, #0
 800212a:	6123      	str	r3, [r4, #16]
 800212c:	4665      	mov	r5, ip
 800212e:	e7b9      	b.n	80020a4 <_printf_i+0x118>
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	1d19      	adds	r1, r3, #4
 8002134:	6011      	str	r1, [r2, #0]
 8002136:	681d      	ldr	r5, [r3, #0]
 8002138:	6862      	ldr	r2, [r4, #4]
 800213a:	2100      	movs	r1, #0
 800213c:	4628      	mov	r0, r5
 800213e:	f7fe f857 	bl	80001f0 <memchr>
 8002142:	b108      	cbz	r0, 8002148 <_printf_i+0x1bc>
 8002144:	1b40      	subs	r0, r0, r5
 8002146:	6060      	str	r0, [r4, #4]
 8002148:	6863      	ldr	r3, [r4, #4]
 800214a:	6123      	str	r3, [r4, #16]
 800214c:	2300      	movs	r3, #0
 800214e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002152:	e7a7      	b.n	80020a4 <_printf_i+0x118>
 8002154:	6923      	ldr	r3, [r4, #16]
 8002156:	462a      	mov	r2, r5
 8002158:	4639      	mov	r1, r7
 800215a:	4630      	mov	r0, r6
 800215c:	47c0      	blx	r8
 800215e:	3001      	adds	r0, #1
 8002160:	d0aa      	beq.n	80020b8 <_printf_i+0x12c>
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	079b      	lsls	r3, r3, #30
 8002166:	d413      	bmi.n	8002190 <_printf_i+0x204>
 8002168:	68e0      	ldr	r0, [r4, #12]
 800216a:	9b03      	ldr	r3, [sp, #12]
 800216c:	4298      	cmp	r0, r3
 800216e:	bfb8      	it	lt
 8002170:	4618      	movlt	r0, r3
 8002172:	e7a3      	b.n	80020bc <_printf_i+0x130>
 8002174:	2301      	movs	r3, #1
 8002176:	464a      	mov	r2, r9
 8002178:	4639      	mov	r1, r7
 800217a:	4630      	mov	r0, r6
 800217c:	47c0      	blx	r8
 800217e:	3001      	adds	r0, #1
 8002180:	d09a      	beq.n	80020b8 <_printf_i+0x12c>
 8002182:	3501      	adds	r5, #1
 8002184:	68e3      	ldr	r3, [r4, #12]
 8002186:	9a03      	ldr	r2, [sp, #12]
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	42ab      	cmp	r3, r5
 800218c:	dcf2      	bgt.n	8002174 <_printf_i+0x1e8>
 800218e:	e7eb      	b.n	8002168 <_printf_i+0x1dc>
 8002190:	2500      	movs	r5, #0
 8002192:	f104 0919 	add.w	r9, r4, #25
 8002196:	e7f5      	b.n	8002184 <_printf_i+0x1f8>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ac      	bne.n	80020f6 <_printf_i+0x16a>
 800219c:	7803      	ldrb	r3, [r0, #0]
 800219e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021a6:	e76c      	b.n	8002082 <_printf_i+0xf6>
 80021a8:	08002549 	.word	0x08002549
 80021ac:	0800255a 	.word	0x0800255a

080021b0 <_read_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4c07      	ldr	r4, [pc, #28]	; (80021d0 <_read_r+0x20>)
 80021b4:	4605      	mov	r5, r0
 80021b6:	4608      	mov	r0, r1
 80021b8:	4611      	mov	r1, r2
 80021ba:	2200      	movs	r2, #0
 80021bc:	6022      	str	r2, [r4, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7fe fad6 	bl	8000770 <_read>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d102      	bne.n	80021ce <_read_r+0x1e>
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	b103      	cbz	r3, 80021ce <_read_r+0x1e>
 80021cc:	602b      	str	r3, [r5, #0]
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	20000118 	.word	0x20000118

080021d4 <__swbuf_r>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	460e      	mov	r6, r1
 80021d8:	4614      	mov	r4, r2
 80021da:	4605      	mov	r5, r0
 80021dc:	b118      	cbz	r0, 80021e6 <__swbuf_r+0x12>
 80021de:	6983      	ldr	r3, [r0, #24]
 80021e0:	b90b      	cbnz	r3, 80021e6 <__swbuf_r+0x12>
 80021e2:	f7ff fb1d 	bl	8001820 <__sinit>
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <__swbuf_r+0x98>)
 80021e8:	429c      	cmp	r4, r3
 80021ea:	d12a      	bne.n	8002242 <__swbuf_r+0x6e>
 80021ec:	686c      	ldr	r4, [r5, #4]
 80021ee:	69a3      	ldr	r3, [r4, #24]
 80021f0:	60a3      	str	r3, [r4, #8]
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	071a      	lsls	r2, r3, #28
 80021f6:	d52e      	bpl.n	8002256 <__swbuf_r+0x82>
 80021f8:	6923      	ldr	r3, [r4, #16]
 80021fa:	b363      	cbz	r3, 8002256 <__swbuf_r+0x82>
 80021fc:	6923      	ldr	r3, [r4, #16]
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	1ac0      	subs	r0, r0, r3
 8002202:	6963      	ldr	r3, [r4, #20]
 8002204:	b2f6      	uxtb	r6, r6
 8002206:	4283      	cmp	r3, r0
 8002208:	4637      	mov	r7, r6
 800220a:	dc04      	bgt.n	8002216 <__swbuf_r+0x42>
 800220c:	4621      	mov	r1, r4
 800220e:	4628      	mov	r0, r5
 8002210:	f7ff fa8a 	bl	8001728 <_fflush_r>
 8002214:	bb28      	cbnz	r0, 8002262 <__swbuf_r+0x8e>
 8002216:	68a3      	ldr	r3, [r4, #8]
 8002218:	3b01      	subs	r3, #1
 800221a:	60a3      	str	r3, [r4, #8]
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	6022      	str	r2, [r4, #0]
 8002222:	701e      	strb	r6, [r3, #0]
 8002224:	6963      	ldr	r3, [r4, #20]
 8002226:	3001      	adds	r0, #1
 8002228:	4283      	cmp	r3, r0
 800222a:	d004      	beq.n	8002236 <__swbuf_r+0x62>
 800222c:	89a3      	ldrh	r3, [r4, #12]
 800222e:	07db      	lsls	r3, r3, #31
 8002230:	d519      	bpl.n	8002266 <__swbuf_r+0x92>
 8002232:	2e0a      	cmp	r6, #10
 8002234:	d117      	bne.n	8002266 <__swbuf_r+0x92>
 8002236:	4621      	mov	r1, r4
 8002238:	4628      	mov	r0, r5
 800223a:	f7ff fa75 	bl	8001728 <_fflush_r>
 800223e:	b190      	cbz	r0, 8002266 <__swbuf_r+0x92>
 8002240:	e00f      	b.n	8002262 <__swbuf_r+0x8e>
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <__swbuf_r+0x9c>)
 8002244:	429c      	cmp	r4, r3
 8002246:	d101      	bne.n	800224c <__swbuf_r+0x78>
 8002248:	68ac      	ldr	r4, [r5, #8]
 800224a:	e7d0      	b.n	80021ee <__swbuf_r+0x1a>
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <__swbuf_r+0xa0>)
 800224e:	429c      	cmp	r4, r3
 8002250:	bf08      	it	eq
 8002252:	68ec      	ldreq	r4, [r5, #12]
 8002254:	e7cb      	b.n	80021ee <__swbuf_r+0x1a>
 8002256:	4621      	mov	r1, r4
 8002258:	4628      	mov	r0, r5
 800225a:	f000 f80d 	bl	8002278 <__swsetup_r>
 800225e:	2800      	cmp	r0, #0
 8002260:	d0cc      	beq.n	80021fc <__swbuf_r+0x28>
 8002262:	f04f 37ff 	mov.w	r7, #4294967295
 8002266:	4638      	mov	r0, r7
 8002268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800226a:	bf00      	nop
 800226c:	080024f4 	.word	0x080024f4
 8002270:	08002514 	.word	0x08002514
 8002274:	080024d4 	.word	0x080024d4

08002278 <__swsetup_r>:
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <__swsetup_r+0xcc>)
 800227a:	b570      	push	{r4, r5, r6, lr}
 800227c:	681d      	ldr	r5, [r3, #0]
 800227e:	4606      	mov	r6, r0
 8002280:	460c      	mov	r4, r1
 8002282:	b125      	cbz	r5, 800228e <__swsetup_r+0x16>
 8002284:	69ab      	ldr	r3, [r5, #24]
 8002286:	b913      	cbnz	r3, 800228e <__swsetup_r+0x16>
 8002288:	4628      	mov	r0, r5
 800228a:	f7ff fac9 	bl	8001820 <__sinit>
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <__swsetup_r+0xd0>)
 8002290:	429c      	cmp	r4, r3
 8002292:	d10f      	bne.n	80022b4 <__swsetup_r+0x3c>
 8002294:	686c      	ldr	r4, [r5, #4]
 8002296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800229a:	b29a      	uxth	r2, r3
 800229c:	0715      	lsls	r5, r2, #28
 800229e:	d42c      	bmi.n	80022fa <__swsetup_r+0x82>
 80022a0:	06d0      	lsls	r0, r2, #27
 80022a2:	d411      	bmi.n	80022c8 <__swsetup_r+0x50>
 80022a4:	2209      	movs	r2, #9
 80022a6:	6032      	str	r2, [r6, #0]
 80022a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ac:	81a3      	strh	r3, [r4, #12]
 80022ae:	f04f 30ff 	mov.w	r0, #4294967295
 80022b2:	e03e      	b.n	8002332 <__swsetup_r+0xba>
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <__swsetup_r+0xd4>)
 80022b6:	429c      	cmp	r4, r3
 80022b8:	d101      	bne.n	80022be <__swsetup_r+0x46>
 80022ba:	68ac      	ldr	r4, [r5, #8]
 80022bc:	e7eb      	b.n	8002296 <__swsetup_r+0x1e>
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <__swsetup_r+0xd8>)
 80022c0:	429c      	cmp	r4, r3
 80022c2:	bf08      	it	eq
 80022c4:	68ec      	ldreq	r4, [r5, #12]
 80022c6:	e7e6      	b.n	8002296 <__swsetup_r+0x1e>
 80022c8:	0751      	lsls	r1, r2, #29
 80022ca:	d512      	bpl.n	80022f2 <__swsetup_r+0x7a>
 80022cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ce:	b141      	cbz	r1, 80022e2 <__swsetup_r+0x6a>
 80022d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022d4:	4299      	cmp	r1, r3
 80022d6:	d002      	beq.n	80022de <__swsetup_r+0x66>
 80022d8:	4630      	mov	r0, r6
 80022da:	f7ff fb57 	bl	800198c <_free_r>
 80022de:	2300      	movs	r3, #0
 80022e0:	6363      	str	r3, [r4, #52]	; 0x34
 80022e2:	89a3      	ldrh	r3, [r4, #12]
 80022e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	6063      	str	r3, [r4, #4]
 80022ee:	6923      	ldr	r3, [r4, #16]
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	89a3      	ldrh	r3, [r4, #12]
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	81a3      	strh	r3, [r4, #12]
 80022fa:	6923      	ldr	r3, [r4, #16]
 80022fc:	b94b      	cbnz	r3, 8002312 <__swsetup_r+0x9a>
 80022fe:	89a3      	ldrh	r3, [r4, #12]
 8002300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002308:	d003      	beq.n	8002312 <__swsetup_r+0x9a>
 800230a:	4621      	mov	r1, r4
 800230c:	4630      	mov	r0, r6
 800230e:	f000 f845 	bl	800239c <__smakebuf_r>
 8002312:	89a2      	ldrh	r2, [r4, #12]
 8002314:	f012 0301 	ands.w	r3, r2, #1
 8002318:	d00c      	beq.n	8002334 <__swsetup_r+0xbc>
 800231a:	2300      	movs	r3, #0
 800231c:	60a3      	str	r3, [r4, #8]
 800231e:	6963      	ldr	r3, [r4, #20]
 8002320:	425b      	negs	r3, r3
 8002322:	61a3      	str	r3, [r4, #24]
 8002324:	6923      	ldr	r3, [r4, #16]
 8002326:	b953      	cbnz	r3, 800233e <__swsetup_r+0xc6>
 8002328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800232c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002330:	d1ba      	bne.n	80022a8 <__swsetup_r+0x30>
 8002332:	bd70      	pop	{r4, r5, r6, pc}
 8002334:	0792      	lsls	r2, r2, #30
 8002336:	bf58      	it	pl
 8002338:	6963      	ldrpl	r3, [r4, #20]
 800233a:	60a3      	str	r3, [r4, #8]
 800233c:	e7f2      	b.n	8002324 <__swsetup_r+0xac>
 800233e:	2000      	movs	r0, #0
 8002340:	e7f7      	b.n	8002332 <__swsetup_r+0xba>
 8002342:	bf00      	nop
 8002344:	20000058 	.word	0x20000058
 8002348:	080024f4 	.word	0x080024f4
 800234c:	08002514 	.word	0x08002514
 8002350:	080024d4 	.word	0x080024d4

08002354 <__swhatbuf_r>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	460e      	mov	r6, r1
 8002358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800235c:	2900      	cmp	r1, #0
 800235e:	b096      	sub	sp, #88	; 0x58
 8002360:	4614      	mov	r4, r2
 8002362:	461d      	mov	r5, r3
 8002364:	da07      	bge.n	8002376 <__swhatbuf_r+0x22>
 8002366:	2300      	movs	r3, #0
 8002368:	602b      	str	r3, [r5, #0]
 800236a:	89b3      	ldrh	r3, [r6, #12]
 800236c:	061a      	lsls	r2, r3, #24
 800236e:	d410      	bmi.n	8002392 <__swhatbuf_r+0x3e>
 8002370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002374:	e00e      	b.n	8002394 <__swhatbuf_r+0x40>
 8002376:	466a      	mov	r2, sp
 8002378:	f000 f850 	bl	800241c <_fstat_r>
 800237c:	2800      	cmp	r0, #0
 800237e:	dbf2      	blt.n	8002366 <__swhatbuf_r+0x12>
 8002380:	9a01      	ldr	r2, [sp, #4]
 8002382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800238a:	425a      	negs	r2, r3
 800238c:	415a      	adcs	r2, r3
 800238e:	602a      	str	r2, [r5, #0]
 8002390:	e7ee      	b.n	8002370 <__swhatbuf_r+0x1c>
 8002392:	2340      	movs	r3, #64	; 0x40
 8002394:	2000      	movs	r0, #0
 8002396:	6023      	str	r3, [r4, #0]
 8002398:	b016      	add	sp, #88	; 0x58
 800239a:	bd70      	pop	{r4, r5, r6, pc}

0800239c <__smakebuf_r>:
 800239c:	898b      	ldrh	r3, [r1, #12]
 800239e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023a0:	079d      	lsls	r5, r3, #30
 80023a2:	4606      	mov	r6, r0
 80023a4:	460c      	mov	r4, r1
 80023a6:	d507      	bpl.n	80023b8 <__smakebuf_r+0x1c>
 80023a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	6123      	str	r3, [r4, #16]
 80023b0:	2301      	movs	r3, #1
 80023b2:	6163      	str	r3, [r4, #20]
 80023b4:	b002      	add	sp, #8
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
 80023b8:	ab01      	add	r3, sp, #4
 80023ba:	466a      	mov	r2, sp
 80023bc:	f7ff ffca 	bl	8002354 <__swhatbuf_r>
 80023c0:	9900      	ldr	r1, [sp, #0]
 80023c2:	4605      	mov	r5, r0
 80023c4:	4630      	mov	r0, r6
 80023c6:	f7ff fb2f 	bl	8001a28 <_malloc_r>
 80023ca:	b948      	cbnz	r0, 80023e0 <__smakebuf_r+0x44>
 80023cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d0:	059a      	lsls	r2, r3, #22
 80023d2:	d4ef      	bmi.n	80023b4 <__smakebuf_r+0x18>
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	81a3      	strh	r3, [r4, #12]
 80023de:	e7e3      	b.n	80023a8 <__smakebuf_r+0xc>
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <__smakebuf_r+0x7c>)
 80023e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80023e4:	89a3      	ldrh	r3, [r4, #12]
 80023e6:	6020      	str	r0, [r4, #0]
 80023e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ec:	81a3      	strh	r3, [r4, #12]
 80023ee:	9b00      	ldr	r3, [sp, #0]
 80023f0:	6163      	str	r3, [r4, #20]
 80023f2:	9b01      	ldr	r3, [sp, #4]
 80023f4:	6120      	str	r0, [r4, #16]
 80023f6:	b15b      	cbz	r3, 8002410 <__smakebuf_r+0x74>
 80023f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023fc:	4630      	mov	r0, r6
 80023fe:	f000 f81f 	bl	8002440 <_isatty_r>
 8002402:	b128      	cbz	r0, 8002410 <__smakebuf_r+0x74>
 8002404:	89a3      	ldrh	r3, [r4, #12]
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	81a3      	strh	r3, [r4, #12]
 8002410:	89a3      	ldrh	r3, [r4, #12]
 8002412:	431d      	orrs	r5, r3
 8002414:	81a5      	strh	r5, [r4, #12]
 8002416:	e7cd      	b.n	80023b4 <__smakebuf_r+0x18>
 8002418:	080017e9 	.word	0x080017e9

0800241c <_fstat_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4c07      	ldr	r4, [pc, #28]	; (800243c <_fstat_r+0x20>)
 8002420:	2300      	movs	r3, #0
 8002422:	4605      	mov	r5, r0
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	f7fe f9e6 	bl	80007fa <_fstat>
 800242e:	1c43      	adds	r3, r0, #1
 8002430:	d102      	bne.n	8002438 <_fstat_r+0x1c>
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	b103      	cbz	r3, 8002438 <_fstat_r+0x1c>
 8002436:	602b      	str	r3, [r5, #0]
 8002438:	bd38      	pop	{r3, r4, r5, pc}
 800243a:	bf00      	nop
 800243c:	20000118 	.word	0x20000118

08002440 <_isatty_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4c06      	ldr	r4, [pc, #24]	; (800245c <_isatty_r+0x1c>)
 8002444:	2300      	movs	r3, #0
 8002446:	4605      	mov	r5, r0
 8002448:	4608      	mov	r0, r1
 800244a:	6023      	str	r3, [r4, #0]
 800244c:	f7fe f9e5 	bl	800081a <_isatty>
 8002450:	1c43      	adds	r3, r0, #1
 8002452:	d102      	bne.n	800245a <_isatty_r+0x1a>
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	b103      	cbz	r3, 800245a <_isatty_r+0x1a>
 8002458:	602b      	str	r3, [r5, #0]
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	20000118 	.word	0x20000118

08002460 <_init>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	bf00      	nop
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr

0800246c <_fini>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	bf00      	nop
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr
